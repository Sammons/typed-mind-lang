name: Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      tag_name:
        description: 'Tag name for release (e.g., v1.0.0)'
        required: true
        type: string
      draft:
        description: 'Create as draft release'
        required: false
        default: 'false'
        type: choice
        options:
          - 'true'
          - 'false'
      prerelease:
        description: 'Mark as pre-release'
        required: false
        default: 'false'
        type: choice
        options:
          - 'true'
          - 'false'

# Prevent concurrent releases
concurrency:
  group: release-${{ github.ref }}
  cancel-in-progress: false

permissions:
  contents: write
  packages: write
  id-token: write

jobs:
  validate:
    name: Validate Release
    runs-on: ubuntu-latest
    timeout-minutes: 10
    outputs:
      tag_name: ${{ steps.tag.outputs.tag_name }}
      version: ${{ steps.tag.outputs.version }}
      package_version: ${{ steps.tag.outputs.package_version }}
      is_prerelease: ${{ steps.tag.outputs.is_prerelease }}
    steps:
      - name: Checkout
        uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # v4.1.7
        with:
          fetch-depth: 0

      - name: Determine tag and version
        id: tag
        run: |
          if [[ "${{ github.event_name }}" == "push" ]]; then
            TAG_NAME="${GITHUB_REF#refs/tags/}"
          else
            TAG_NAME="${{ github.event.inputs.tag_name }}"
          fi
          
          # Validate tag format
          if ! [[ "$TAG_NAME" =~ ^v[0-9]+\.[0-9]+\.[0-9]+(-[a-zA-Z0-9\.]+)?$ ]]; then
            echo "Error: Invalid tag format. Expected v1.2.3 or v1.2.3-beta.1"
            exit 1
          fi
          
          VERSION="${TAG_NAME#v}"
          PACKAGE_VERSION="$VERSION"
          
          # Check if pre-release
          if [[ "$VERSION" == *"-"* ]] || [[ "${{ github.event.inputs.prerelease }}" == "true" ]]; then
            IS_PRERELEASE="true"
          else
            IS_PRERELEASE="false"
          fi
          
          echo "tag_name=$TAG_NAME" >> $GITHUB_OUTPUT
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "package_version=$PACKAGE_VERSION" >> $GITHUB_OUTPUT
          echo "is_prerelease=$IS_PRERELEASE" >> $GITHUB_OUTPUT
          
          echo "Tag: $TAG_NAME"
          echo "Version: $VERSION"
          echo "Pre-release: $IS_PRERELEASE"

      - name: Setup Node and pnpm
        uses: ./.github/actions/setup-node-pnpm

      - name: Verify versions match
        run: |
          # Check that all package versions match the tag
          TAG_VERSION="${{ steps.tag.outputs.version }}"
          
          for package_json in lib/*/package.json; do
            if [ -f "$package_json" ]; then
              PACKAGE_NAME=$(jq -r '.name' "$package_json")
              PACKAGE_VERSION=$(jq -r '.version' "$package_json")
              
              if [ "$PACKAGE_VERSION" != "$TAG_VERSION" ]; then
                echo "Error: Version mismatch in $package_json"
                echo "  Expected: $TAG_VERSION"
                echo "  Found: $PACKAGE_VERSION"
                exit 1
              fi
            fi
          done
          
          echo "✓ All package versions match tag version"

  test:
    name: Test and Build
    needs: validate
    runs-on: ubuntu-latest
    timeout-minutes: 15
    steps:
      - name: Checkout
        uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # v4.1.7

      - name: Setup Node and pnpm
        uses: ./.github/actions/setup-node-pnpm

      - name: Lint
        run: pnpm lint

      - name: Test
        run: pnpm test

      - name: Build
        run: pnpm build

      - name: Upload build artifacts
        uses: actions/upload-artifact@50769540e7f4bd5e21e526ee35c689e35e0d6874 # v4.4.0
        with:
          name: build-artifacts
          path: |
            lib/*/dist
            lib/*/lib
            lib/typed-mind-vscode-extension/*.vsix
          retention-days: 1

  publish-npm:
    name: Publish NPM Packages
    needs: [validate, test]
    runs-on: ubuntu-latest
    timeout-minutes: 15
    environment:
      name: npm
      url: https://www.npmjs.com/org/sammons
    steps:
      - name: Checkout
        uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # v4.1.7

      - name: Setup Node and pnpm
        uses: ./.github/actions/setup-node-pnpm

      - name: Download build artifacts
        uses: actions/download-artifact@fa0a91b85d4f404e444e00e005971372dc801d16 # v4.1.8
        with:
          name: build-artifacts

      - name: Configure npm authentication
        run: |
          echo "//registry.npmjs.org/:_authToken=${{ secrets.NPM_TOKEN }}" > ~/.npmrc
          npm whoami

      - name: Publish packages
        run: .github/scripts/publish-npm-packages.sh

      - name: Verify published packages
        run: |
          VERSION="${{ needs.validate.outputs.version }}"
          
          for package_json in lib/typed-mind*/package.json lib/typed-mind-*/package.json; do
            if [ -f "$package_json" ] && [[ "$package_json" != *"vscode-extension"* ]] && [[ "$package_json" != *"static-website"* ]] && [[ "$package_json" != *"test-suite"* ]]; then
              PACKAGE_NAME=$(jq -r '.name' "$package_json")
              echo "Verifying $PACKAGE_NAME@$VERSION..."
              npm view "$PACKAGE_NAME@$VERSION" version || exit 1
            fi
          done

  publish-vscode:
    name: Publish VS Code Extension
    needs: [validate, test, publish-npm]
    runs-on: ubuntu-latest
    timeout-minutes: 15
    environment:
      name: vscode-marketplace
      url: https://marketplace.visualstudio.com/items?itemName=sammons.typed-mind
    steps:
      - name: Checkout
        uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # v4.1.7

      - name: Setup Node and pnpm
        uses: ./.github/actions/setup-node-pnpm

      - name: Package VS Code extension
        run: |
          cd lib/typed-mind-vscode-extension
          pnpm install
          npx @vscode/vsce package --no-dependencies
          echo "VSIX_FILE=$(ls *.vsix)" >> $GITHUB_ENV
          cd ../..

      - name: Publish to VS Code Marketplace
        run: |
          cd lib/typed-mind-vscode-extension
          npx @vscode/vsce publish --pat ${{ secrets.VSCE_PAT }} --no-dependencies
          cd ../..

      - name: Upload VSIX artifact
        uses: actions/upload-artifact@50769540e7f4bd5e21e526ee35c689e35e0d6874 # v4.4.0
        with:
          name: vscode-extension
          path: lib/typed-mind-vscode-extension/*.vsix
          retention-days: 30

  create-release:
    name: Create GitHub Release
    needs: [validate, test, publish-npm, publish-vscode]
    runs-on: ubuntu-latest
    timeout-minutes: 15
    steps:
      - name: Checkout
        uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # v4.1.7
        with:
          fetch-depth: 0

      - name: Setup Node and pnpm
        uses: ./.github/actions/setup-node-pnpm

      - name: Download VS Code extension
        uses: actions/download-artifact@fa0a91b85d4f404e444e00e005971372dc801d16 # v4.1.8
        with:
          name: vscode-extension
          path: lib/typed-mind-vscode-extension

      - name: Download build artifacts
        uses: actions/download-artifact@fa0a91b85d4f404e444e00e005971372dc801d16 # v4.1.8
        with:
          name: build-artifacts
          path: ./

      - name: Create release artifacts
        run: |
          VERSION="${{ needs.validate.outputs.version }}"
          .github/scripts/create-release-artifacts.sh "$VERSION"

      - name: Generate changelog
        id: changelog
        run: |
          # Get the previous tag
          PREVIOUS_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
          
          if [ -z "$PREVIOUS_TAG" ]; then
            echo "This is the first release" > changelog.md
          else
            echo "## What's Changed" > changelog.md
            echo "" >> changelog.md
            
            # Get commit messages grouped by type
            echo "### Features" >> changelog.md
            git log --pretty=format:"- %s (%h)" "$PREVIOUS_TAG..HEAD" --grep="^feat" >> changelog.md || true
            echo "" >> changelog.md
            
            echo "### Bug Fixes" >> changelog.md
            git log --pretty=format:"- %s (%h)" "$PREVIOUS_TAG..HEAD" --grep="^fix" >> changelog.md || true
            echo "" >> changelog.md
            
            echo "### Other Changes" >> changelog.md
            git log --pretty=format:"- %s (%h)" "$PREVIOUS_TAG..HEAD" --grep="^[^(feat|fix)]" >> changelog.md || true
          fi
          
          echo "" >> changelog.md
          echo "## Downloads" >> changelog.md
          echo "" >> changelog.md
          echo "### NPM Packages" >> changelog.md
          echo '```bash' >> changelog.md
          echo "npm install @sammons/typed-mind@${{ needs.validate.outputs.version }}" >> changelog.md
          echo "npm install -g @sammons/typed-mind-cli@${{ needs.validate.outputs.version }}" >> changelog.md
          echo '```' >> changelog.md
          echo "" >> changelog.md
          echo "### VS Code Extension" >> changelog.md
          echo "Install from VS Code Marketplace or download the VSIX file below." >> changelog.md
          echo "" >> changelog.md
          echo "### Standalone Downloads" >> changelog.md
          echo "See the Assets section below for standalone packages and source code." >> changelog.md
          
          echo "changelog<<EOF" >> $GITHUB_OUTPUT
          cat changelog.md >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Create Release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          TAG="${{ needs.validate.outputs.tag_name }}"
          VERSION="${{ needs.validate.outputs.version }}"
          
          # Build release flags
          RELEASE_FLAGS=""
          if [[ "${{ github.event.inputs.draft }}" == "true" ]]; then
            RELEASE_FLAGS="$RELEASE_FLAGS --draft"
          fi
          if [[ "${{ needs.validate.outputs.is_prerelease }}" == "true" ]]; then
            RELEASE_FLAGS="$RELEASE_FLAGS --prerelease"
          fi
          
          # Create release with all artifacts
          gh release create "$TAG" \
            --title "TypedMind $VERSION" \
            --notes-file changelog.md \
            $RELEASE_FLAGS \
            release-artifacts/*
          
          echo "✓ Release created: $TAG with $(ls -1 release-artifacts | wc -l) artifacts"

  deploy-docs:
    name: Deploy Documentation
    needs: [validate, create-release]
    if: needs.validate.outputs.is_prerelease != 'true'
    runs-on: ubuntu-latest
    timeout-minutes: 10
    permissions:
      contents: read
      pages: write
      id-token: write
    steps:
      - name: Checkout
        uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # v4.1.7

      - name: Setup Node and pnpm
        uses: ./.github/actions/setup-node-pnpm

      - name: Build documentation site
        run: |
          cd lib/typed-mind-static-website
          npm run build
          cd ../..

      - name: Setup Pages
        uses: actions/configure-pages@983d7736d9b0ae728b81ab479565c72886d7745b # v5.0.0

      - name: Upload artifact
        uses: actions/upload-pages-artifact@56afc609e74202658d3ffba0e8f6dda462b719fa # v3.0.1
        with:
          path: './lib/typed-mind-static-website/src'

      - name: Deploy to GitHub Pages
        uses: actions/deploy-pages@d6db90164ac5ed86f2b6aed7e0febac5b3c0c03e # v4.0.5

  summary:
    name: Release Summary
    needs: [validate, test, publish-npm, publish-vscode, create-release, deploy-docs]
    if: always()
    runs-on: ubuntu-latest
    timeout-minutes: 5
    steps:
      - name: Generate summary
        run: |
          echo "# Release Summary for ${{ needs.validate.outputs.tag_name }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          echo "## Version Information" >> $GITHUB_STEP_SUMMARY
          echo "- Tag: ${{ needs.validate.outputs.tag_name }}" >> $GITHUB_STEP_SUMMARY
          echo "- Version: ${{ needs.validate.outputs.version }}" >> $GITHUB_STEP_SUMMARY
          echo "- Pre-release: ${{ needs.validate.outputs.is_prerelease }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          echo "## Release Status" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Check each job status
          if [[ "${{ needs.test.result }}" == "success" ]]; then
            echo "✅ Tests passed" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ Tests failed" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [[ "${{ needs.publish-npm.result }}" == "success" ]]; then
            echo "✅ NPM packages published" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ NPM publishing failed" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [[ "${{ needs.publish-vscode.result }}" == "success" ]]; then
            echo "✅ VS Code extension published" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ VS Code extension publishing failed" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [[ "${{ needs.create-release.result }}" == "success" ]]; then
            echo "✅ GitHub release created" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ GitHub release creation failed" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [[ "${{ needs.deploy-docs.result }}" == "success" ]]; then
            echo "✅ Documentation deployed" >> $GITHUB_STEP_SUMMARY
          elif [[ "${{ needs.deploy-docs.result }}" == "skipped" ]]; then
            echo "⏭️ Documentation deployment skipped (pre-release)" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ Documentation deployment failed" >> $GITHUB_STEP_SUMMARY
          fi