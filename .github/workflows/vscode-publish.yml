name: VS Code Extension Publish

on:
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      tag:
        description: 'Git tag to publish (leave empty for latest commit)'
        required: false
        type: string
      dry_run:
        description: 'Dry run (do not actually publish)'
        required: false
        default: false
        type: boolean

# Required secrets:
# VSCE_TOKEN - Visual Studio Code Marketplace publisher access token

jobs:
  publish-extension:
    runs-on: ubuntu-latest
    permissions:
      contents: read
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ github.event.inputs.tag || github.sha }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 9
          run_install: false

      - name: Get pnpm store directory
        shell: bash
        run: echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build all packages
        run: pnpm run build

      - name: Get extension version
        id: version
        working-directory: lib/typed-mind-vscode-extension
        run: |
          version=$(jq -r '.version' package.json)
          echo "version=${version}" >> $GITHUB_OUTPUT
          echo "Extension version: ${version}"

      - name: Build VS Code extension
        working-directory: lib/typed-mind-vscode-extension
        run: |
          echo "Building VS Code extension..."
          pnpm run build
          
          # Verify dist directory exists
          if [ ! -d "dist" ]; then
            echo "Error: dist directory not found after build"
            exit 1
          fi
          
          # Verify main entry point exists
          if [ ! -f "dist/extension.js" ]; then
            echo "Error: dist/extension.js not found after build"
            exit 1
          fi
          
          echo "Build completed successfully"

      - name: Package VS Code extension
        working-directory: lib/typed-mind-vscode-extension
        run: |
          echo "Packaging VS Code extension..."
          npx @vscode/vsce package --no-dependencies
          
          # Verify the package was created
          if [ ! -f "typed-mind-${{ steps.version.outputs.version }}.vsix" ]; then
            echo "Error: Extension package not found"
            exit 1
          fi
          
          # Show package info
          echo "Package created: typed-mind-${{ steps.version.outputs.version }}.vsix"
          ls -la *.vsix

      - name: Validate extension package
        working-directory: lib/typed-mind-vscode-extension
        run: |
          echo "Validating extension package..."
          
          # Check if package can be listed
          npx @vscode/vsce ls typed-mind-${{ steps.version.outputs.version }}.vsix
          
          echo "Package validation completed"

      - name: Check if version already published
        id: check_published
        env:
          VSCE_TOKEN: ${{ secrets.VSCE_TOKEN }}
        run: |
          # Check if this version is already published
          if npx @vscode/vsce show sammons.typed-mind --json 2>/dev/null | jq -e --arg version "${{ steps.version.outputs.version }}" '.versions[] | select(.version == $version)' > /dev/null; then
            echo "Version ${{ steps.version.outputs.version }} already published"
            echo "already_published=true" >> $GITHUB_OUTPUT
          else
            echo "Version ${{ steps.version.outputs.version }} not yet published"
            echo "already_published=false" >> $GITHUB_OUTPUT
          fi

      - name: Dry run summary
        if: ${{ github.event.inputs.dry_run }}
        working-directory: lib/typed-mind-vscode-extension
        run: |
          echo "=== DRY RUN MODE ==="
          echo "VS Code extension package details:"
          echo "  - Name: typed-mind"
          echo "  - Version: ${{ steps.version.outputs.version }}"
          echo "  - Publisher: sammons"
          echo "  - Package file: typed-mind-${{ steps.version.outputs.version }}.vsix"
          echo ""
          
          if [ "${{ steps.check_published.outputs.already_published }}" == "true" ]; then
            echo "⚠️  This version is already published on the marketplace"
          else
            echo "✅ This version is ready to be published"
          fi
          
          echo ""
          echo "Package contents:"
          npx @vscode/vsce ls typed-mind-${{ steps.version.outputs.version }}.vsix
          echo "=== END DRY RUN ==="

      - name: Publish to VS Code Marketplace
        if: ${{ !github.event.inputs.dry_run && steps.check_published.outputs.already_published == 'false' }}
        working-directory: lib/typed-mind-vscode-extension
        env:
          VSCE_TOKEN: ${{ secrets.VSCE_TOKEN }}
        run: |
          echo "Publishing typed-mind@${{ steps.version.outputs.version }} to VS Code Marketplace..."
          npx @vscode/vsce publish --packagePath typed-mind-${{ steps.version.outputs.version }}.vsix
          echo "Extension published successfully!"

      - name: Verify publication
        if: ${{ !github.event.inputs.dry_run && steps.check_published.outputs.already_published == 'false' }}
        env:
          VSCE_TOKEN: ${{ secrets.VSCE_TOKEN }}
        run: |
          echo "Verifying extension publication..."
          
          # Wait a bit for the marketplace to update
          sleep 30
          
          max_attempts=10
          attempt=1
          
          while [ $attempt -le $max_attempts ]; do
            if npx @vscode/vsce show sammons.typed-mind --json 2>/dev/null | jq -e --arg version "${{ steps.version.outputs.version }}" '.versions[] | select(.version == $version)' > /dev/null; then
              echo "✅ Extension typed-mind@${{ steps.version.outputs.version }} is now available on the marketplace!"
              break
            else
              echo "⏳ Waiting for extension to be available on marketplace (attempt $attempt/$max_attempts)"
              sleep 30
              attempt=$((attempt + 1))
            fi
          done
          
          if [ $attempt -gt $max_attempts ]; then
            echo "❌ Extension not found on marketplace after $max_attempts attempts"
            echo "This might be normal - it can take time for the marketplace to update"
          fi

      - name: Upload extension artifact
        if: ${{ !github.event.inputs.dry_run }}
        uses: actions/upload-artifact@v4
        with:
          name: vscode-extension
          path: lib/typed-mind-vscode-extension/typed-mind-${{ steps.version.outputs.version }}.vsix
          retention-days: 90

      - name: Create publication summary
        if: ${{ !github.event.inputs.dry_run }}
        run: |
          echo "=== VS CODE EXTENSION PUBLICATION SUMMARY ===" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ steps.check_published.outputs.already_published }}" == "false" ]; then
            echo "✅ **Extension Published Successfully!**" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "- **Name**: typed-mind" >> $GITHUB_STEP_SUMMARY
            echo "- **Version**: ${{ steps.version.outputs.version }}" >> $GITHUB_STEP_SUMMARY
            echo "- **Publisher**: sammons" >> $GITHUB_STEP_SUMMARY
            echo "- **Marketplace**: [View Extension](https://marketplace.visualstudio.com/items?itemName=sammons.typed-mind)" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "The extension is now available for installation in VS Code! 🎉" >> $GITHUB_STEP_SUMMARY
          else
            echo "⚠️ **Extension Already Published**" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "Version ${{ steps.version.outputs.version }} was already available on the marketplace." >> $GITHUB_STEP_SUMMARY
          fi