name: Version Bump

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'New version (e.g., 1.2.3)'
        required: true
        type: string
      commit_message:
        description: 'Commit message'
        required: false
        default: 'chore: bump version to {version}'
        type: string
      create_pr:
        description: 'Create PR instead of direct commit'
        required: false
        default: 'true'
        type: choice
        options:
          - 'true'
          - 'false'

# Prevent concurrent version bumps
concurrency:
  group: version-bump
  cancel-in-progress: false

permissions:
  contents: write
  pull-requests: write

jobs:
  bump-version:
    name: Bump Version
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - name: Checkout
        uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # v4.1.7
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Node and pnpm
        uses: ./.github/actions/setup-node-pnpm

      - name: Configure Git
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

      - name: Validate version
        run: |
          VERSION="${{ github.event.inputs.version }}"
          
          # Validate semantic version format
          if ! [[ "$VERSION" =~ ^[0-9]+\.[0-9]+\.[0-9]+(-[a-zA-Z0-9\.]+)?$ ]]; then
            echo "Error: Invalid version format. Use semantic versioning (e.g., 1.2.3 or 1.2.3-beta.1)"
            exit 1
          fi
          
          # Check if version is greater than current
          CURRENT_VERSION=$(jq -r '.version' package.json)
          
          # Simple comparison - in real scenario you'd want proper semver comparison
          if [[ "$VERSION" == "$CURRENT_VERSION" ]]; then
            echo "Error: Version $VERSION is the same as current version"
            exit 1
          fi
          
          echo "Bumping version from $CURRENT_VERSION to $VERSION"

      - name: Update versions
        run: |
          VERSION="${{ github.event.inputs.version }}"
          .github/scripts/version-sync.sh "$VERSION"

      - name: Update lock file
        run: pnpm install --lockfile-only

      - name: Create branch
        if: ${{ github.event.inputs.create_pr == 'true' }}
        run: |
          BRANCH_NAME="version-bump-${{ github.event.inputs.version }}"
          git checkout -b "$BRANCH_NAME"
          echo "BRANCH_NAME=$BRANCH_NAME" >> $GITHUB_ENV

      - name: Commit changes
        run: |
          VERSION="${{ github.event.inputs.version }}"
          MESSAGE="${{ github.event.inputs.commit_message }}"
          MESSAGE="${MESSAGE//\{version\}/$VERSION}"
          
          git add -A
          git commit -m "$MESSAGE"

      - name: Push changes (direct)
        if: ${{ github.event.inputs.create_pr != 'true' }}
        run: |
          git push origin main

      - name: Push changes (PR)
        if: ${{ github.event.inputs.create_pr == 'true' }}
        run: |
          git push origin "${{ env.BRANCH_NAME }}"

      - name: Create Pull Request
        if: ${{ github.event.inputs.create_pr == 'true' }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          VERSION="${{ github.event.inputs.version }}"
          
          # Create PR body
          cat > pr-body.md << 'EOF'
          ## Version Bump to ${{ github.event.inputs.version }}
          
          This PR bumps all package versions to `${{ github.event.inputs.version }}`.
          
          ### Changes
          - Updated version in root `package.json`
          - Updated versions in all workspace packages
          - Updated inter-package dependency versions
          - Updated VS Code extension version
          
          ### Checklist
          - [ ] All package versions are synchronized
          - [ ] Tests pass
          - [ ] Ready for release
          
          ---
          *This PR was automatically created by the Version Bump workflow.*
          EOF
          
          # Create the PR
          gh pr create \
            --title "chore: bump version to $VERSION" \
            --body-file pr-body.md \
            --base main \
            --head "${{ env.BRANCH_NAME }}" \
            --label "version-bump" \
            --label "automated"

      - name: Summary
        run: |
          VERSION="${{ github.event.inputs.version }}"
          
          echo "## Version Bump Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "✅ Successfully bumped version to **$VERSION**" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [[ "${{ github.event.inputs.create_pr }}" == "true" ]]; then
            echo "📝 Pull request created for review" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "Next steps:" >> $GITHUB_STEP_SUMMARY
            echo "1. Review and merge the PR" >> $GITHUB_STEP_SUMMARY
            echo "2. Create a git tag: \`git tag v$VERSION\`" >> $GITHUB_STEP_SUMMARY
            echo "3. Push the tag to trigger release: \`git push origin v$VERSION\`" >> $GITHUB_STEP_SUMMARY
          else
            echo "✅ Changes committed directly to main branch" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "Next steps:" >> $GITHUB_STEP_SUMMARY
            echo "1. Create a git tag: \`git tag v$VERSION\`" >> $GITHUB_STEP_SUMMARY
            echo "2. Push the tag to trigger release: \`git push origin v$VERSION\`" >> $GITHUB_STEP_SUMMARY
          fi