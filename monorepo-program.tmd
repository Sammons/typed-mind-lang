# TypedMind Monorepo Architecture
# Each package is an Asset containing one Program with Dependencies modeling package.json deps

# Main coordination program
TypedMindMonorepo -> MonorepoCoordinator v1.0.0

# Coordination file that manages the monorepo
MonorepoCoordinator @ package.json:
  <- [TypedMindCore, TypedMindCLI, TypedMindLSP, TypedMindRenderer, TypedMindVSCode, TypedMindWebsite, TypedMindTestSuite]
  -> [WorkspaceConfig]

WorkspaceConfig <:
  => [manageWorkspaces, buildAll, testAll]

# Workspace management functions
manageWorkspaces :: () => void
  "Manages pnpm workspace configuration"

buildAll :: () => Promise<void>
  "Builds all packages in correct dependency order"

testAll :: () => Promise<void>
  "Runs tests across all packages"

# Assets - Each package is an Asset containing one Program
TypedMindCore ~ "@sammons/typed-mind core parser package"
  >> [TypedMindParser]

TypedMindCLI ~ "@sammons/typed-mind-cli command-line interface"
  >> [CLIProgram]
  <- [TypedMindCore, TypedMindRenderer] # Dependencies from package.json

TypedMindLSP ~ "@sammons/typed-mind-lsp language server"
  >> [LSPProgram]
  <- [TypedMindCore] # Dependencies from package.json

TypedMindRenderer ~ "@sammons/typed-mind-renderer visualization renderer"
  >> [RendererProgram]
  <- [TypedMindCore] # Dependencies from package.json

TypedMindVSCode ~ "@sammons/typed-mind-vscode-extension VS Code extension"
  >> [VSCodeProgram]
  <- [TypedMindLSP] # Dependencies from package.json

TypedMindWebsite ~ "@sammons/typed-mind-static-website static website"
  >> [WebsiteProgram]

TypedMindTestSuite ~ "@sammons/typed-mind-test-suite test suite"
  >> [TestProgram]
  <- [TypedMindCore] # Dependencies from package.json

# Programs - Each Asset contains exactly one Program
TypedMindParser -> CoreParser v1.0.0
CLIProgram -> CLITool v1.0.0
LSPProgram -> LanguageServer v1.0.0
RendererProgram -> VisualizationRenderer v1.0.0
VSCodeProgram -> VSCodeExtension v1.0.0
TestProgram -> TestRunner v1.0.0

# Static website program (most complex subsystem)
WebsiteProgram -> WebsiteRoot v1.0.0

# Entry point files for each program
CoreParser @ lib/typed-mind/src/index.ts:
  -> [DSLChecker, Parser, Validator]

CLITool @ lib/typed-mind-cli/src/cli.ts:
  -> [main]

LanguageServer @ lib/typed-mind-lsp/src/server.ts:
  -> [startServer]

VisualizationRenderer @ lib/typed-mind-renderer/src/index.ts:
  -> [TypedMindRenderer]

VSCodeExtension @ lib/typed-mind-vscode-extension/src/extension.ts:
  -> [activate, deactivate]

TestRunner @ lib/typed-mind-test-suite/src/runner.ts:
  -> [runTests]

WebsiteRoot @ lib/typed-mind-static-website/src/index.html:
  <- [BrowserParser, MonacoIntegration, WebsiteAssets, PlaygroundPage]
  -> [LandingPage]

LandingPage &! "Main website landing page"
  > [Navigation, HeroSection, SyntaxSection, PlaygroundSection, GettingStartedSection]

Navigation & "Site navigation"
  < [LandingPage]

HeroSection & "Hero section"
  < [LandingPage]

SyntaxSection & "Syntax documentation section"
  < [LandingPage]

PlaygroundSection & "Playground teaser section"
  < [LandingPage]

GettingStartedSection & "Getting started section"
  < [LandingPage]

# Playground page
PlaygroundPage @ lib/typed-mind-static-website/src/playground.html:
  <- [BrowserParser, MonacoIntegration, ChatService, WebsiteAssets]
  -> [PlaygroundApp]

PlaygroundApp &! "Interactive TypedMind playground"
  > [PlaygroundToolbar, EditorPanel, OutputPanel]

PlaygroundToolbar & "Top toolbar with controls"
  < [PlaygroundApp]
  > [SyntaxToggle, FormatButton, ExampleSelector]

SyntaxToggle & "Syntax highlighting toggle"
  < [PlaygroundToolbar]

FormatButton & "Format code button"
  < [PlaygroundToolbar]

ExampleSelector & "Example code selector"
  < [PlaygroundToolbar]

EditorPanel & "Monaco editor panel"
  < [PlaygroundApp]
  > [MonacoEditor]

MonacoEditor & "Monaco code editor"
  < [EditorPanel]

OutputPanel & "Output panel with tabs"
  < [PlaygroundApp]  
  > [ProblemsTab, ASTTab, VisualizationTab, ChatTab]

ProblemsTab & "Validation problems tab"
  < [OutputPanel]

ASTTab & "AST visualization tab"
  < [OutputPanel]

VisualizationTab & "Graph visualization tab"
  < [OutputPanel]

ChatTab & "AI Assistant integration tab"
  < [OutputPanel]
  > [ChatInterface, TokenSetup]

# Chatbot integration components
ChatInterface & "Main chat interface"
  < [ChatTab]
  > [MessageList, ChatInput, ClearButton]

MessageList & "Chat message history"
  < [ChatInterface]
  > [ChatMessage]

ChatMessage & "Individual chat message"
  < [MessageList]

ChatInput & "Message input field"
  < [ChatInterface]

ClearButton & "Clear chat history button"
  < [ChatInterface]

TokenSetup & "API token configuration"
  < [ChatTab]
  > [TokenSelector, TokenInput]

TokenSelector & "API provider selector"
  < [TokenSetup]

TokenInput & "Token input field"
  < [TokenSetup]

# Browser parser and Monaco integration
BrowserParser @ lib/typed-mind-static-website/assets/js/typedmind-parser-browser.js:
  <- [Monaco, Editor, ParseResult, ValidationError]
  -> [parseTypedMind]

MonacoIntegration @ lib/typed-mind-static-website/assets/js/typedmind-monaco-simple.js:
  <- [BrowserParser, LZString, Monaco, Editor, ParseResult, ValidationError]
  -> [registerTypedMindLanguage, setupUrlSync, validateCode, setLanguageConfiguration, setMonarchTokensProvider, updateUrl, loadFromUrl, parse, displayProblems]

# Website assets and resources
WebsiteAssets @ lib/typed-mind-static-website/assets/:
  <- [BuildScript, NetlifyConfig, VercelConfig, DeploymentConfig]
  -> [PlaygroundExamples, MainJS, MainStyles, PlaygroundStyles]

PlaygroundExamples @ lib/typed-mind-static-website/assets/js/playground-examples-standalone.js:
  -> [TYPEDMIND_EXAMPLES]

MainJS @ lib/typed-mind-static-website/assets/js/main.js:
  <- [TypedMindGrammar, CLAUDE_API_KEY, OPENAI_API_KEY]
  -> [setupSyntaxToggles, themeToggle, navigationHandlers, navigateToPlayground]

MainStyles @ lib/typed-mind-static-website/assets/css/styles.css:
  # Main website styles

PlaygroundStyles @ lib/typed-mind-static-website/assets/css/playground.css:
  # Playground-specific styles

# Chatbot service layer
ChatService @ lib/typed-mind-static-website/assets/js/chat-service.js:
  <- [TokenManager, ChatHistory, APIAdapters, UserMessage, AssistantMessage, ChatResponse, SystemPrompt, TokenConfig, TypedMindGrammar]
  -> [sendMessage, formatPrompt, validateToken, callAPI, saveToHistory, clearHistory]

TokenManager @ lib/typed-mind-static-website/assets/js/token-manager.js:
  <- [CryptoUtils, TokenConfig]
  -> [storeToken, getToken, clearToken]

ChatHistory @ lib/typed-mind-static-website/assets/js/chat-history.js:
  <- [UserMessage, AssistantMessage]
  -> [saveMessage, loadHistory, clearChatHistory]

APIAdapters @ lib/typed-mind-static-website/assets/js/api-adapters.js:
  -> [ChatGPTAdapter, ClaudeAdapter, BaseAPIAdapter]

BaseAPIAdapter <:
  => [sendRequest]

ChatGPTAdapter <: BaseAPIAdapter
  => [sendRequest]

ClaudeAdapter <: BaseAPIAdapter
  => [sendRequest]

CryptoUtils @ lib/typed-mind-static-website/assets/js/crypto-utils.js:
  -> [encrypt, decrypt]

# Build and deployment configuration
BuildScript @ lib/typed-mind-static-website/build.js:
  -> [copyFiles, minifyAssets]

NetlifyConfig ! lib/typed-mind-static-website/netlify.toml : DeploymentConfig
VercelConfig ! lib/typed-mind-static-website/vercel.json : DeploymentConfig

# Key functions in Monaco integration
registerTypedMindLanguage :: (monaco: Monaco) => void
  "Registers TypedMind language with Monaco editor"
  <- [Monaco]
  ~ [MonacoEditor]
  ~> [setLanguageConfiguration, setMonarchTokensProvider]

setupUrlSync :: () => void
  "Synchronizes editor content with URL for sharing"
  ~ [MonacoEditor]
  ~> [updateUrl, loadFromUrl]

validateCode :: (editor: Editor) => void
  "Validates TypedMind code in real-time"
  <- [TypedMindParser, Editor]
  ~ [ProblemsTab]
  ~> [parse, displayProblems]

navigateToPlayground :: () => void
  "Navigates from landing page to playground"
  ~ [PlaygroundSection]

setupSyntaxToggles :: () => void
  "Sets up syntax highlighting toggles"
  ~ [SyntaxSection, SyntaxToggle]

themeToggle :: () => void
  "Handles theme switching"
  ~ [LandingPage, PlaygroundApp]

navigationHandlers :: () => void
  "Sets up navigation event handlers"
  ~ [Navigation]

copyFiles :: () => void
  "Copies files during build process"

minifyAssets :: () => void
  "Minifies CSS and JS assets"

setLanguageConfiguration :: (monaco: Monaco) => void
  "Sets Monaco language configuration"

setMonarchTokensProvider :: (monaco: Monaco) => void
  "Sets Monaco syntax highlighting"

updateUrl :: (content: string) => void
  "Updates URL with editor content"

loadFromUrl :: () => string
  "Loads content from URL parameters"

parse :: (code: string) => ParseResult
  "Parses TypedMind code"
  <- [TypedMindParser]
  -> [ParseResult]

parseTypedMind :: (code: string) => ParseResult
  "Browser-compatible TypedMind parser"
  <- [TypedMindParser]
  -> [ParseResult]

displayProblems :: (problems: ValidationError[]) => void
  "Displays validation problems"
  <- [ValidationError]

# Chatbot functions
sendMessage :: (message: string, apiType: string) => Promise<ChatResponse>
  "Sends message to selected AI API"
  <- [UserMessage]
  -> [AssistantMessage, ChatResponse]
  ~ [ChatInterface, MessageList]
  ~> [validateToken, formatPrompt, callAPI, saveToHistory]

storeToken :: (token: string, apiType: string) => void
  "Securely stores API token"
  <- [TokenConfig]
  ~ [TokenInput]
  ~> [encrypt]

getToken :: (apiType: string) => string
  "Retrieves stored API token"
  ~ [TokenSelector]
  ~> [decrypt]

clearToken :: (apiType: string) => void
  "Clears stored API token"
  ~ [TokenSetup]

clearHistory :: () => void
  "Clears all chat history"
  ~ [ClearButton, MessageList]

clearChatHistory :: () => void
  "Clears chat history from storage"
  ~ [MessageList]

saveMessage :: (message: UserMessage | AssistantMessage) => void
  "Saves message to history"

loadHistory :: () => (UserMessage | AssistantMessage)[]
  "Loads chat history"

formatPrompt :: (userMessage: string) => SystemPrompt
  "Formats message with TypedMind grammar context"
  <- [TypedMindGrammar]
  -> [SystemPrompt]

validateToken :: (token: string) => boolean
  "Validates API token format"

callAPI :: (prompt: SystemPrompt, apiType: string) => Promise<string>
  "Calls the selected AI API"
  <- [SystemPrompt]

saveToHistory :: (userMsg: UserMessage, assistantMsg: AssistantMessage) => void
  "Saves conversation to history"
  <- [UserMessage, AssistantMessage]

encrypt :: (data: string) => string
  "Encrypts sensitive data"

decrypt :: (encryptedData: string) => string
  "Decrypts sensitive data"

sendRequest :: (prompt: SystemPrompt) => Promise<string>
  "Base API request method"

# Data types and DTOs

ParseResult % "Parse operation result"
  - valid: boolean "Is valid"
  - errors: ValidationError[] "Validation errors"
  - ast: object "Abstract syntax tree" (optional)

ValidationError % "Validation error details"
  - line: number "Line number"
  - column: number "Column number"
  - message: string "Error message"

Monaco % "Monaco editor instance"
  - editorInstance: object "Editor instance reference"
  - languagesAPI: object "Languages API reference"

Editor % "Monaco editor interface"
  - value: string "Current editor content"
  - language: string "Editor language mode"
  - readOnly: boolean "Is editor read-only"

TYPEDMIND_EXAMPLES % "Playground code examples"
  - examples: array "Array of example objects"

UserMessage % "User chat message"
  - content: string "Message content"
  - timestamp: Date "Message timestamp"

AssistantMessage % "AI assistant response"
  - content: string "Response content"  
  - timestamp: Date "Response timestamp"
  - code: string "Generated TypedMind code" (optional)

ChatResponse % "API response wrapper"
  - success: boolean "Request success"
  - message: AssistantMessage "Response message" (optional)
  - error: string "Error message" (optional)

SystemPrompt % "System prompt with grammar"
  - system: string "System instructions"
  - grammar: string "TypedMind grammar reference"
  - userMessage: string "User's request"

TokenConfig % "API token configuration"
  - apiType: string "chatgpt | claude"
  - token: string "Encrypted API token"

TypedMindGrammar % "TypedMind language grammar"
  - rules: string "Grammar rules"
  - examples: string "Usage examples"

DeploymentConfig % "Deployment configuration"
  - build: object "Build settings"
  - redirects: array "URL redirects"

# Runtime parameters
CLAUDE_API_KEY $browser "Claude API key for chatbot" (optional)
OPENAI_API_KEY $browser "OpenAI API key for chatbot" (optional)

# External dependencies
LZString ^ "String compression library" v1.4.4