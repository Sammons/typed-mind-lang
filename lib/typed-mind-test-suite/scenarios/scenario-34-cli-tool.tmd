# CLI Tool - Task Runner and Build System
TaskMaster -> MainFile v1.5.0 # Modern task runner and build tool

# External dependencies
commander ^ "CLI framework" v12.1.0
chalk ^ "Terminal styling" v5.3.0
ora ^ "Spinner for async operations" v8.0.1
yaml ^ "YAML parser" v2.3.4
json5 ^ "JSON5 parser" v2.2.3
cosmiconfig ^ "Config file loader" v9.0.0
ajv ^ "JSON schema validator" v8.12.0
winston ^ "Logging library" v3.11.0
glob ^ "File pattern matching" v10.3.10
fs-extra ^ "File system operations" v11.2.0
execa ^ "Process execution" v8.0.1
cross-spawn ^ "Cross-platform spawn" v7.0.3
chokidar ^ "File watcher" v3.6.0

# Entry point
MainFile @ src/index.ts:
  <- [CLIFile, TaskRunnerFile, ConfigLoaderFile, TasksFile, PluginsFile, UtilsFile, ConstantsFile, DTOsFile]
  -> [main]

# CLI framework
CLIFile @ src/cli/index.ts:
  <- [CommandsFile]
  -> [cli, parseArgs, displayHelp]

CommandsFile @ src/cli/commands.ts:
  <- [TaskRunnerFile, Logger, FileUtils]
  -> [registerCommands, runCommand, buildCommand, watchCommand, testCommand, deployCommand]

# Core functionality
TaskRunnerFile @ src/core/task-runner.ts:
  <- [TaskRegistryFile, TaskSchedulerFile, DependencyResolverFile, WorkerPoolFile]
  -> [taskRunner, runTask, runParallel, runSequential]

TaskRegistryFile @ src/core/task-registry.ts:
  <- [SchemaValidatorFile]
  -> [taskRegistry, registerTask, getTask, listTasks]

DependencyResolverFile @ src/core/dependency-resolver.ts:
  -> [dependencyResolver, resolveDependencies, detectCycles]

TaskSchedulerFile @ src/core/task-scheduler.ts:
  <- [WorkerPoolFile]
  -> [taskScheduler, scheduleTask, cancelTask]

# Task types
TasksFile @ src/tasks/index.ts:
  <- [ProcessUtils, FileUtils, taskDefinitions]
  -> [ShellTask, FileTask, HttpTask, DockerTask, K8sTask]

# Plugins
PluginsFile @ src/plugins/index.ts:
  <- [PluginAPI, FileUtils]
  -> [loadPlugins, registerPlugin]

PluginAPI #: src/plugins/api.ts # Plugin API class and file
  <- [TaskRegistryFile]
  => [registerTask, registerCommand, emit, on]
  -> [createContext, exposeAPI]

# Configuration
ConfigLoaderFile @ src/config/config-loader.ts:
  <- [SchemaValidatorFile, FileUtils]
  -> [configLoader, loadConfig, validateConfig]

SchemaValidatorFile @ src/config/schema-validator.ts:
  -> [schemaValidator, validateTaskSchema]

# Utils
UtilsFile @ src/utils/index.ts:
  <- [Logger, FileUtils, ProcessUtils]
  -> [getLogger, getFileUtils, getProcessUtils, networkUtils]

Logger #: src/utils/logger.ts # Logger class and file
  => [info, warn, error, debug]
  -> [createLogger]

FileUtils #: src/utils/file-utils.ts # File utilities class and file
  => [glob, read, write, copy, remove]
  -> [findFiles, copyFiles, cleanDirectory]

ProcessUtils #: src/utils/process-utils.ts # Process utilities class and file
  => [spawn, exec, shell, kill]
  -> [spawn, exec, shell]

# Worker pool
WorkerPoolFile @ src/workers/worker-pool.ts:
  <- [WorkerFile]
  -> [workerPool, createWorker, executeInWorker]

WorkerFile @ src/workers/worker.ts:
  <- [TasksFile, workerConstants]
  -> [taskWorker]

# Environment variables
NODE_ENV $env "Node environment" (optional)
  = "development"
TASKMASTER_HOME $env "TaskMaster home directory" (optional)
  = "~/.taskmaster"
PARALLEL_JOBS $env "Maximum parallel jobs" (optional)
  = "4"
LOG_LEVEL $env "Logging level" (optional)
  = "info"
NO_COLOR $env "Disable colored output" (optional)
  = "false"

# Runtime configuration
NODE_VERSION $runtime "Node.js version" (required)
  = "20.x"
NPM_VERSION $runtime "NPM version" (optional)
  = "10.x"

# Configuration
CONFIG_FILE $config "Configuration file name" (optional)
  = "taskmaster.yml"
PLUGIN_DIR $config "Plugin directory" (optional)
  = "./plugins"
CACHE_DIR $config "Cache directory" (optional)
  = ".taskmaster-cache"
DEFAULT_SHELL $config "Default shell for commands" (optional)
  = "/bin/bash"

# Main CLI class
cli <:
  => [parse, run, showVersion, showHelp, command]
  <- [commander, chalk, ora]

# Core classes
taskRunner <:
  => [run, runTask, runTasks, stopAll]

taskRegistry <:
  => [register, get, list, clear]

dependencyResolver <:
  => [resolve, buildGraph, detectCycles]

taskScheduler <:
  => [schedule, cancel, getStatus, waitForCompletion]

configLoader <:
  => [load, reload, watch]
  <- [yaml, json5, cosmiconfig]

schemaValidator <:
  => [validate, getErrors]
  <- [ajv]

workerPool <:
  => [execute, terminate, getWorkerCount]

networkUtils <:
  => [fetch, download, upload]

# Task classes
ShellTask <:
  => [execute, validate]

FileTask <:
  => [execute, validate]

HttpTask <:
  => [execute, validate]

DockerTask <:
  => [execute, validate]

K8sTask <:
  => [execute, validate]

# Main function
main :: (argv: string[]) => Promise<void>
  ~> [parseArgs, runCommand]
  $< [NODE_ENV]

# CLI functions
parseArgs :: (argv: string[]) => CLIArgs
  -> CLIArgs
  ~> [cli.parse]

displayHelp :: () => void
  ~> [cli.showHelp]

registerCommands :: () => void
  ~> [cli.command]

# Command functions
runCommand :: (taskName: string, options: RunOptions) => Promise<void>
  <- RunOptions
  ~> [taskRunner.runTask, createLogger]
  $< [PARALLEL_JOBS, NODE_VERSION]

buildCommand :: (options: BuildOptions) => Promise<void>
  <- BuildOptions
  ~> [taskRunner.runTasks, cleanDirectory]
  $< [NPM_VERSION]

watchCommand :: (pattern: string, options: WatchOptions) => Promise<void>
  <- WatchOptions
  ~> [findFiles, taskRunner.runTask]

testCommand :: (options: TestOptions) => Promise<void>
  <- TestOptions
  ~> [taskRunner.runTask]

deployCommand :: (target: string, options: DeployOptions) => Promise<void>
  <- DeployOptions
  ~> [taskRunner.runTasks]

# Core functions
runTask :: (name: string, context: TaskContext) => Promise<TaskResult>
  <- TaskContext
  -> TaskResult
  ~> [taskRegistry.get, dependencyResolver.resolve, taskScheduler.schedule]

runParallel :: (tasks: string[], context: TaskContext) => Promise<TaskResult[]>
  <- TaskContext
  -> TaskResult[]
  ~> [workerPool.execute]
  $< [PARALLEL_JOBS]

runSequential :: (tasks: string[], context: TaskContext) => Promise<TaskResult[]>
  <- TaskContext
  -> TaskResult[]
  ~> [runTask]

# Task registry functions
registerTask :: (name: string, definition: TaskDefinition) => void
  <- TaskDefinition
  ~> [schemaValidator.validate]

getTask :: (name: string) => TaskDefinition
  -> TaskDefinition

listTasks :: () => TaskInfo[]
  -> TaskInfo[]

# Dependency resolver functions
resolveDependencies :: (taskName: string) => string[]
  ~> [taskRegistry.get]

detectCycles :: (graph: DependencyGraph) => string[]
  <- DependencyGraph

# Task scheduler functions
scheduleTask :: (task: Task, context: TaskContext) => Promise<TaskResult>
  <- Task, TaskContext
  -> TaskResult
  ~> [workerPool.execute]

cancelTask :: (taskId: string) => void

# Config functions
loadConfig :: (path: string) => Promise<Config>
  -> Config
  ~> [findFiles, schemaValidator.validate]
  $< [CONFIG_FILE, TASKMASTER_HOME]

validateConfig :: (config: Config) => ValidationResult
  <- Config
  -> ValidationResult

validateTaskSchema :: (definition: TaskDefinition) => ValidationResult
  <- TaskDefinition
  -> ValidationResult

# Plugin functions
loadPlugins :: () => Promise<void>
  ~> [findFiles, registerPlugin]
  $< [PLUGIN_DIR]

registerPlugin :: (plugin: Plugin) => void
  <- Plugin
  ~> [createContext, exposeAPI]

createContext :: (task: Task) => PluginContext
  <- Task
  -> PluginContext

exposeAPI :: () => void

# Worker functions
createWorker :: () => Worker
  -> Worker

executeInWorker :: (task: Task, context: TaskContext) => Promise<TaskResult>
  <- Task, TaskContext
  -> TaskResult

taskWorker :: (message: WorkerMessage) => Promise<WorkerResult>
  <- WorkerMessage
  -> WorkerResult

# Utility functions
getLogger :: () => void
  $< [LOG_LEVEL, NO_COLOR]

getFileUtils :: () => void

getProcessUtils :: () => void
  $< [DEFAULT_SHELL]

createLogger :: (options: LoggerOptions) => void
  <- LoggerOptions

findFiles :: (pattern: string, options?: GlobOptions) => Promise<string[]>
  <- GlobOptions

copyFiles :: (src: string, dest: string) => Promise<void>

cleanDirectory :: (path: string) => Promise<void>
  $< [CACHE_DIR]

spawn :: (command: string, args: string[], options?: SpawnOptions) => Promise<SpawnResult>
  <- SpawnOptions
  -> SpawnResult

exec :: (command: string, options?: ExecOptions) => Promise<ExecResult>
  <- ExecOptions
  -> ExecResult

shell :: (command: string, options?: ShellOptions) => Promise<ShellResult>
  <- ShellOptions
  -> ShellResult
  $< [DEFAULT_SHELL]

# Data Transfer Objects
CLIArgs % "Parsed CLI arguments"
  - command: string "Command to run"
  - args: string[] "Command arguments"
  - options: object "Command options"

RunOptions % "Run command options"
  - watch: boolean "Watch mode"
  - parallel: boolean "Run in parallel"
  - env: object "Environment variables" (optional)
  - cwd: string "Working directory" (optional)

BuildOptions % "Build command options"
  - clean: boolean "Clean before build"
  - production: boolean "Production build"
  - target: string "Build target" (optional)

WatchOptions % "Watch command options"
  - task: string "Task to run"
  - debounce: number "Debounce delay"

TestOptions % "Test command options"
  - coverage: boolean "Generate coverage"
  - watch: boolean "Watch mode"
  - filter: string "Test filter" (optional)

DeployOptions % "Deploy command options"
  - dry: boolean "Dry run"
  - force: boolean "Force deploy"
  - tag: string "Deployment tag" (optional)

TaskContext % "Task execution context"
  - env: object "Environment variables"
  - cwd: string "Working directory"
  - vars: object "Task variables"
  - secrets: object "Secret values"

TaskResult % "Task execution result"
  - success: boolean "Success flag"
  - duration: number "Execution time"
  - output: string "Task output" (optional)
  - error: string "Error message" (optional)

TaskDefinition % "Task definition"
  - name: string "Task name"
  - type: string "Task type"
  - description: string "Task description" (optional)
  - depends: string[] "Dependencies" (optional)
  - config: object "Task configuration"

TaskInfo % "Task information"
  - name: string "Task name"
  - type: string "Task type"
  - description: string "Description" (optional)
  - dependencies: string[] "Task dependencies"

Config % "Configuration object"
  - version: string "Config version"
  - tasks: TaskDefinition[] "Task definitions"
  - variables: object "Global variables"
  - plugins: string[] "Plugin list" (optional)

ValidationResult % "Validation result"
  - valid: boolean "Validation status"
  - errors: ValidationError[] "Validation errors"

ValidationError % "Validation error"
  - path: string "Error path"
  - message: string "Error message"

Plugin % "Plugin definition"
  - name: string "Plugin name"
  - version: string "Plugin version"
  - path: string "Path to plugin module"
  - enabled: boolean "Whether plugin is enabled"

Task % "Task instance"
  - definition: TaskDefinition "Task definition"
  - status: string "Task status"

Worker % "Worker instance"
  - id: string "Worker ID"
  - status: string "Worker status"

WorkerMessage % "Worker message"
  - type: string "Message type"
  - task: Task "Task to execute"
  - context: TaskContext "Execution context"

WorkerResult % "Worker result"
  - taskId: string "Task ID"
  - result: TaskResult "Task result"

DependencyGraph % "Task dependency graph"
  - nodes: string[] "Task names"
  - edges: object "Dependencies"

GlobOptions % "Glob options"
  - cwd: string "Working directory" (optional)
  - ignore: string[] "Patterns to ignore" (optional)

SpawnOptions % "Spawn options"
  - cwd: string "Working directory" (optional)
  - env: object "Environment variables" (optional)
  - shell: boolean "Use shell" (optional)

SpawnResult % "Spawn result"
  - exitCode: number "Exit code"
  - stdout: string "Standard output"
  - stderr: string "Standard error"

ExecOptions % "Exec options"
  - cwd: string "Working directory" (optional)
  - env: object "Environment variables" (optional)
  - timeout: number "Timeout in ms" (optional)

ExecResult % "Exec result"
  - stdout: string "Standard output"
  - stderr: string "Standard error"

ShellOptions % "Shell options"
  - cwd: string "Working directory" (optional)
  - env: object "Environment variables" (optional)
  - shell: string "Shell to use" (optional)

ShellResult % "Shell result"
  - exitCode: number "Exit code"
  - stdout: string "Standard output"
  - stderr: string "Standard error"

LoggerOptions % "Logger options"
  - level: string "Log level"
  - colorize: boolean "Use colors"
  - timestamp: boolean "Include timestamps"

PluginContext % "Plugin context"
  - task: Task "Current task"
  - api: PluginAPI "Plugin API"

# Classes
PluginAPI < "Plugin API interface"
  .registerTask(definition: TaskDefinition): void
  .registerCommand(name: string, handler: Function): void
  .emit(event: string, data: any): void
  .on(event: string, handler: Function): void

Logger < "Logger interface"
  .info(message: string, meta?: object): void
  .warn(message: string, meta?: object): void
  .error(message: string, meta?: object): void
  .debug(message: string, meta?: object): void

FileUtils < "File utilities interface"
  .glob(pattern: string, options?: GlobOptions): Promise<string[]>
  .read(path: string): Promise<string>
  .write(path: string, content: string): Promise<void>
  .copy(src: string, dest: string): Promise<void>
  .remove(path: string): Promise<void>

ProcessUtils < "Process utilities interface"
  .spawn(command: string, args?: string[], options?: SpawnOptions): Promise<SpawnResult>
  .exec(command: string, options?: ExecOptions): Promise<ExecResult>
  .shell(command: string, options?: ShellOptions): Promise<ShellResult>
  .kill(pid: number, signal?: string): Promise<void>

# DTOs file
DTOsFile @ src/types/index.ts:
  -> [CLIArgs, RunOptions, BuildOptions, WatchOptions, TestOptions, DeployOptions, TaskContext, TaskResult, TaskDefinition, TaskInfo, Config, ValidationResult, ValidationError, Plugin, Task, Worker, WorkerMessage, WorkerResult, DependencyGraph, GlobOptions, SpawnOptions, SpawnResult, ExecOptions, ExecResult, ShellOptions, ShellResult, LoggerOptions, PluginContext, TaskConstants, WorkerConstants]

# Constants
ConstantsFile @ src/constants/index.ts:
  -> [taskDefinitions, workerConstants]

taskDefinitions ! src/tasks/constants.ts : TaskConstants
TaskConstants % "Task type constants"
  - TASK_TYPES: string[] "Available task types"
  - TASK_STATUS: string[] "Task status values"

workerConstants ! src/workers/constants.ts : WorkerConstants
WorkerConstants % "Worker constants"
  - WORKER_STATUS: string[] "Worker status values"
  - MAX_WORKER_MEMORY: string "Maximum worker memory"