# Electron Desktop Application - Code Editor
CodeEditorApp -> MainFile v3.0.0 # Advanced code editor built with Electron

# External dependencies
electron ^ "Electron framework" v28.0.0
@reduxjs/toolkit ^ "Redux toolkit for state management" v2.0.1
react ^ "React framework" v18.2.0
react-dom ^ "React DOM" v18.2.0
fs-extra ^ "Enhanced file system operations" v11.2.0
chokidar ^ "File watching library" v3.6.0
simple-git ^ "Git integration library" v3.22.0
node-pty ^ "Terminal emulation" v1.0.0
@monaco-editor/react ^ "Monaco editor React wrapper" v4.6.0

# Electron main process
MainFile @ src/main/index.ts:
  <- [WindowManagerFile, MenuBuilderFile, IPCHandlerFile, TerminalServiceFile, PluginManagerFile, RendererFile, RendererServicesFile, SharedFile, AssetsFile]
  -> [createWindow]

WindowManagerFile @ src/main/window-manager.ts:
  <- []
  -> [WindowManager, createMainWindow, createSettingsWindow]

MenuBuilderFile @ src/main/menu-builder.ts:
  <- []
  -> [MenuBuilder, buildApplicationMenu]

IPCHandlerFile @ src/main/ipc-handler.ts:
  <- [FileSystemFile, GitIntegrationFile]
  -> [setupIPC, handleFileOperations, handleGitOperations]

# Main process services
FileSystemFile @ src/main/services/file-system.ts:
  <- []
  -> [FileSystem, readFile, writeFile, watchDirectory, createFile, deleteFile]

GitIntegrationFile @ src/main/services/git-integration.ts:
  <- []
  -> [GitIntegration, getStatus, commit, push, pull, getBranches, checkout]

TerminalServiceFile @ src/main/services/terminal.ts:
  <- []
  -> [TerminalService, createTerminal, writeToTerminal, resizeTerminal]

PluginManagerFile @ src/main/services/plugin-manager.ts:
  <- []
  -> [PluginManager, loadPlugin, unloadPlugin, pluginRegistry]

# Renderer process
RendererFile @ src/renderer/index.tsx:
  <- [AppRendererFile, StoreRendererFile]
  -> []

AppRendererFile @ src/renderer/App.tsx:
  <- [ComponentsFile]
  -> [App]

# Renderer components
ComponentsFile @ src/renderer/components/index.ts:
  <- [EditorComponentsFile]
  -> [EditorView, SidebarView, StatusBarView, TerminalView, TabBar, FileTree, SearchPanel]

# Editor components
EditorComponentsFile @ src/renderer/components/editor/index.ts:
  <- []
  -> [CodeEditor, LineNumbers, Minimap, AutoComplete, SyntaxHighlighter]

# Renderer state management
StoreRendererFile @ src/renderer/store/index.ts:
  <- [EditorSliceFile, FileSliceFile, GitSliceFile, TerminalSliceFile, SettingsSliceFile]
  -> [store]

EditorSliceFile @ src/renderer/store/editorSlice.ts:
  <- []
  -> [editorSlice, setActiveFile, updateContent, setCursor]

FileSliceFile @ src/renderer/store/fileSlice.ts:
  <- []
  -> [fileSlice, openFile, closeFile, saveFile]

GitSliceFile @ src/renderer/store/gitSlice.ts:
  <- []
  -> [gitSlice, updateStatus, setCurrentBranch]

TerminalSliceFile @ src/renderer/store/terminalSlice.ts:
  <- []
  -> [terminalSlice]

SettingsSliceFile @ src/renderer/store/settingsSlice.ts:
  <- []
  -> [settingsSlice]

# Renderer services
RendererServicesFile @ src/renderer/services/index.ts:
  <- [IPCServiceFile, ThemeServiceFile, KeyboardServiceFile]
  -> []

IPCServiceFile @ src/renderer/services/ipc.ts:
  <- []
  -> [ipcService]

ThemeServiceFile @ src/renderer/services/theme.ts:
  <- []
  -> [themeService]

KeyboardServiceFile @ src/renderer/services/keyboard.ts:
  <- []
  -> [keyboardService]

# Shared utilities
SharedFile @ src/shared/index.ts:
  <- []
  -> [FileType, GitStatus, Theme, KeyBinding]

# Assets
AssetsFile @ src/assets/index.ts:
  <- []
  -> [AppIcon, FileIcons, ThemeIcons, Logo]

# Environment variables
NODE_ENV $env "Node environment"
  = "development"
GITHUB_TOKEN $env "GitHub API token" (optional)
UPDATE_SERVER_URL $env "Auto-update server URL"
  = "https://updates.codeeditor.app"
ANALYTICS_ID $env "Analytics tracking ID" (optional)

# Runtime configuration
ELECTRON_VERSION $runtime "Electron version"
  = "28.0.0"
NODE_VERSION $runtime "Node.js version"
  = "20.x"
MONACO_VERSION $runtime "Monaco editor version"
  = "0.45.0"

# Build configuration
TARGET_PLATFORM $config "Target platform"
  = "darwin"
CODE_SIGN_IDENTITY $config "Code signing identity" (optional)
NOTARIZE $config "Notarize macOS builds"
  = "false"
AUTO_UPDATE $config "Enable auto-updates"
  = "true"

# UI Components
App &! "Main application component"
  > [TabBar, EditorView, SidebarView, StatusBarView, TerminalView]

TabBar & "Open files tab bar"
  < [App]
  > [TabIconDisplay]

EditorView & "Code editor container"
  < [App]
  > [CodeEditor, LineNumbers, Minimap]

SidebarView & "Sidebar with file tree and search"
  < [App]
  > [FileTree, SearchPanel]

StatusBarView & "Status bar with git info"
  < [App]

TerminalView & "Integrated terminal"
  < [App]

# Editor components
CodeEditor & "Monaco editor wrapper"
  < [EditorView]
  > [AutoComplete, SyntaxHighlighter]

LineNumbers & "Line number gutter"
  < [EditorView]

Minimap & "Code minimap"
  < [EditorView]

AutoComplete & "Autocomplete suggestions"
  < [CodeEditor]

SyntaxHighlighter & "Syntax highlighting"
  < [CodeEditor]

# Sidebar components
FileTree & "File explorer tree"
  < [SidebarView]
  > [FileIconDisplay]

SearchPanel & "Search and replace panel"
  < [SidebarView]

# Additional UI Components for file icons
FileIconDisplay & "File icon display component"
  < [FileTree]

TabIconDisplay & "Tab icon display component"
  < [TabBar]

# Assets
AppIcon ~ "Application icon"
  >> CodeEditorApp

FileIcons ~ "File type icons"

ThemeIcons ~ "Theme-specific icons"

Logo ~ "Application logo"

# Main process classes
WindowManager <:
  <- []
  => [createWindow, closeWindow, focusWindow, getAllWindows]

MenuBuilder <:
  <- []
  => [buildMenu, updateMenu, setEnabled]

FileSystem <:
  <- []
  => [readFile, writeFile, readDirectory, watchDirectory, createFile, deleteFile]

GitIntegration <:
  <- []
  => [init, getStatus, stage, commit, push, pull, getBranches, checkout]

TerminalService <:
  <- []
  => [createTerminal, writeToTerminal, resizeTerminal, closeTerminal]

PluginManager <:
  <- []
  => [loadPlugin, unloadPlugin, getLoadedPlugins, callPluginMethod]

# Renderer services classes
ipcService <:
  <- []
  => [invoke, send, on, off]

themeService <:
  => [loadTheme, applyTheme, getAvailableThemes]

keyboardService <:
  => [registerShortcut, unregisterShortcut, handleKeyPress]

# Main process functions
createWindow :: () => BrowserWindow
  -> BrowserWindow
  ~> [WindowManager.createWindow]
  $< [NODE_ENV, ELECTRON_VERSION, UPDATE_SERVER_URL]

setupIPC :: () => void
  ~> [handleFileOperations, handleGitOperations]
  $< [NODE_ENV]

createMainWindow :: (options: WindowOptions) => BrowserWindow
  <- WindowOptions
  -> BrowserWindow
  ~> [WindowManager.createWindow]
  $< [TARGET_PLATFORM, AUTO_UPDATE]

createSettingsWindow :: () => BrowserWindow
  -> BrowserWindow
  ~> [WindowManager.createWindow]

buildApplicationMenu :: () => Menu
  -> Menu
  ~> [MenuBuilder.buildMenu]
  $< [NODE_ENV, TARGET_PLATFORM, CODE_SIGN_IDENTITY, NOTARIZE]

# IPC handlers
handleFileOperations :: () => void
  ~> [FileSystem.readFile, FileSystem.writeFile, FileSystem.watchDirectory]

handleGitOperations :: () => void
  ~> [GitIntegration.getStatus, GitIntegration.commit, GitIntegration.push]
  $< [GITHUB_TOKEN]

# File operations
readFile :: (path: string) => Promise<FileContent>
  -> FileContent
  ~> [FileSystem.readFile]
  ~ [EditorView, CodeEditor]

writeFile :: (path: string, content: string) => Promise<void>
  ~> [FileSystem.writeFile]
  ~ [EditorView]

watchDirectory :: (path: string) => FSWatcher
  -> FSWatcher
  ~> [FileSystem.watchDirectory]
  ~ [FileTree]

createFile :: (path: string) => Promise<void>
  ~> [FileSystem.createFile]
  ~ [FileTree]

deleteFile :: (path: string) => Promise<void>
  ~> [FileSystem.deleteFile]
  ~ [FileTree]

# Git operations
getStatus :: () => Promise<GitStatusResult>
  -> GitStatusResult
  ~> [GitIntegration.getStatus]
  ~ [StatusBarView, SidebarView]

commit :: (message: string, files: string[]) => Promise<void>
  ~> [GitIntegration.commit]
  ~ [StatusBarView]

push :: () => Promise<void>
  ~> [GitIntegration.push]
  ~ [StatusBarView]
  $< [GITHUB_TOKEN]

pull :: () => Promise<void>
  ~> [GitIntegration.pull]
  ~ [StatusBarView]
  $< [GITHUB_TOKEN]

getBranches :: () => Promise<string[]>
  ~> [GitIntegration.getBranches]
  ~ [StatusBarView]

checkout :: (branch: string) => Promise<void>
  ~> [GitIntegration.checkout]
  ~ [StatusBarView]

# Terminal operations
createTerminal :: (shell: string) => Terminal
  -> Terminal
  ~> [TerminalService.createTerminal]
  ~ [TerminalView]
  $< [NODE_ENV]

writeToTerminal :: (id: string, data: string) => void
  ~> [TerminalService.writeToTerminal]
  ~ [TerminalView]
  $< [ANALYTICS_ID]

resizeTerminal :: (id: string, cols: number, rows: number) => void
  ~> [TerminalService.resizeTerminal]
  ~ [TerminalView]

# Plugin operations
loadPlugin :: (path: string) => Promise<void>
  ~> [PluginManager.loadPlugin]
  $< [NODE_ENV]

unloadPlugin :: (name: string) => Promise<void>
  ~> [PluginManager.unloadPlugin]

# Editor state functions
setActiveFile :: (file: OpenFile) => void
  <- OpenFile
  ~ [EditorView, TabBar]

updateContent :: (content: string) => void
  ~ [EditorView, CodeEditor]
  $< [MONACO_VERSION, NODE_VERSION]

setCursor :: (position: CursorPosition) => void
  <- CursorPosition
  ~ [CodeEditor, LineNumbers]

openFile :: (path: string) => void
  ~> [readFile]
  ~ [FileTree, TabBar, EditorView]

closeFile :: (path: string) => void
  ~ [TabBar, EditorView]

saveFile :: () => void
  ~> [writeFile]
  ~ [EditorView, StatusBarView]

updateStatus :: (status: GitStatusResult) => void
  <- GitStatusResult
  ~ [StatusBarView]

setCurrentBranch :: (branch: string) => void
  ~ [StatusBarView]

# Data Transfer Objects
WindowOptions % "Window creation options"
  - width: number "Window width"
  - height: number "Window height"
  - x: number "X position" (optional)
  - y: number "Y position" (optional)
  - fullscreen: boolean "Fullscreen mode"

BrowserWindow % "Electron browser window"
  - id: number "Window ID"
  - webContents: object "Web contents"

Menu % "Application menu"
  - items: object[] "Menu items"

FileContent % "File content data"
  - path: string "File path"
  - content: string "File content"
  - encoding: string "File encoding"
  - language: string "Programming language"

GitStatusResult % "Git repository status"
  - branch: string "Current branch"
  - ahead: number "Commits ahead"
  - behind: number "Commits behind"
  - staged: string[] "Staged files"
  - modified: string[] "Modified files"
  - untracked: string[] "Untracked files"

Terminal % "Terminal instance"
  - id: string "Terminal ID"
  - shell: string "Shell path"
  - cols: number "Terminal columns"
  - rows: number "Terminal rows"

OpenFile % "Open file info"
  - path: string "File path"
  - content: string "File content"
  - isDirty: boolean "Has unsaved changes"
  - language: string "File language"

CursorPosition % "Cursor position"
  - line: number "Line number"
  - column: number "Column number"

FSWatcher % "File system watcher"
  - path: string "Watched path"
  - recursive: boolean "Watch recursively"

# Type definitions
FileType % "File type enumeration"
  - name: string "Type name"
  - extensions: string[] "File extensions"
  - icon: string "Icon identifier"

GitStatus % "Git file status"
  - path: string "File path"
  - status: string "Status code"

Theme % "Editor theme"
  - name: string "Theme name"
  - isDark: boolean "Dark theme flag"
  - colors: object "Color definitions"

KeyBinding % "Keyboard shortcut"
  - key: string "Key combination"
  - command: string "Command ID"
  - when: string "Context condition" (optional)

# Constants
pluginRegistry ! src/main/constants/plugin-registry.ts : object

editorSlice ! src/renderer/store/editor-slice.ts : object

fileSlice ! src/renderer/store/file-slice.ts : object

gitSlice ! src/renderer/store/git-slice.ts : object

terminalSlice ! src/renderer/store/terminal-slice.ts : object

settingsSlice ! src/renderer/store/settings-slice.ts : object

store ! src/renderer/store/store.ts : object