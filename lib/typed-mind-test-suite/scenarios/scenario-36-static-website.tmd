# Modern Static Website - Portfolio & Blog
PortfolioSite -> BuildFile v1.0.0 # Modern portfolio and blog with edge deployment

# External Dependencies
next ^ "React framework for static generation" v14.0.0
react ^ "UI library" v18.2.0
react-dom ^ "React DOM renderer" v18.2.0
tailwindcss ^ "Utility-first CSS framework" v3.4.0
@mdx-js/loader ^ "MDX loader for webpack" v3.0.0
@mdx-js/react ^ "React components for MDX" v3.0.0
gray-matter ^ "Front matter parser" v4.0.3
reading-time ^ "Calculate reading time" v1.5.0
sharp ^ "Image optimization" v0.33.0
@vercel/analytics ^ "Vercel analytics" v1.1.0
@vercel/og ^ "Open Graph image generation" v0.5.0
feed ^ "RSS feed generator" v4.2.2
sitemap ^ "Sitemap generator" v7.1.1
rehype-highlight ^ "Syntax highlighting" v7.0.0
rehype-slug ^ "Add IDs to headings" v6.0.0
remark-gfm ^ "GitHub Flavored Markdown" v4.0.0
clsx ^ "Conditional classNames" v2.1.0
framer-motion ^ "Animation library" v10.16.0
zod ^ "Schema validation" v3.22.0
resend ^ "Email API for contact forms" v2.0.0
@plaiceholder/next ^ "Image placeholders" v3.0.0

# Build system files
BuildFile @ next.config.mjs:
  <- [nextConfig, MDXProcessorFile, ImageOptimizerFile, RSSGeneratorFile, SitemapGeneratorFile, ContentLoaderFile, SchemaFile, SEOFile, SiteConfigFile, HomePageFile, BlogPageFile, BlogPostFile, ProjectsPageFile, AboutPageFile, ContactPageFile, ContactAPIFile, OGImageAPIFile, RootLayoutFile, HeaderFile, FooterFile, NavigationFile, ThemeToggleFile, BlogCardFile, AuthorBioFile, TableOfContentsFile, ProjectCardFile, TechStackFile, ContactFormFile, NewsletterFile, ButtonFile, CardFile, MDXComponentsFile, UtilsFile, HooksFile, AssetImportsFile, PostCSSConfigFile, TailwindConfigFile]
  -> [build]

PostCSSConfigFile @ postcss.config.js:
  -> [postcssConfig]

TailwindConfigFile @ tailwind.config.ts:
  -> [tailwindConfig]

# Page files
HomePageFile @ app/page.tsx:
  <- [HomePage, getAllPosts, getProjects, ContentLoaderFile]
  -> []

BlogPageFile @ app/blog/page.tsx:
  <- [BlogListPage, getAllPosts, ContentLoaderFile, UtilsFile]
  -> []

BlogPostFile @ app/blog/[slug]/page.tsx:
  <- [BlogPostPage, getPostBySlug, getAllPosts, ContentLoaderFile, MDXComponentsFile]
  -> [generateStaticParams]

ProjectsPageFile @ app/projects/page.tsx:
  <- [ProjectsPage, getProjects, ContentLoaderFile]
  -> []

AboutPageFile @ app/about/page.tsx:
  <- [AboutPage]
  -> []

ContactPageFile @ app/contact/page.tsx:
  <- [ContactPage, ContactForm]
  -> []

# API Routes
ContactAPIFile @ app/api/contact/route.ts:
  <- [validateContact, SchemaFile, EmailClient]
  -> [POST, EmailClient]

OGImageAPIFile @ app/api/og/route.tsx:
  <- [AssetImportsFile, defaultOG, OGImageGenerator]
  -> [GET, OGImageGenerator]

# Layout files
RootLayoutFile @ app/layout.tsx:
  <- [Header, Footer, logoSvg, interFont, monoFont, AssetImportsFile, Analytics]
  -> []

# Component files
HeaderFile @ components/header.tsx:
  <- [Navigation, ThemeToggle, Logo, logoSvg, AssetImportsFile]
  -> [Header]

FooterFile @ components/footer.tsx:
  <- [SocialLinks, Newsletter]
  -> [Footer]

NavigationFile @ components/navigation.tsx:
  <- [NavLink, MobileMenu]
  -> [Navigation]

ThemeToggleFile @ components/theme-toggle.tsx:
  <- [useTheme, HooksFile]
  -> [ThemeToggle]

# Blog components
BlogCardFile @ components/blog-card.tsx:
  <- [formatDate, Card]
  -> [BlogCard]

AuthorBioFile @ components/author-bio.tsx:
  -> [AuthorBio]

TableOfContentsFile @ components/table-of-contents.tsx:
  <- [useScrollSpy]
  -> [TableOfContents]

# Portfolio components
ProjectCardFile @ components/project-card.tsx:
  <- [TechStack, Card]
  -> [ProjectCard]

TechStackFile @ components/tech-stack.tsx:
  <- [cn, UtilsFile]
  -> [TechStack]

# Form components
ContactFormFile @ components/contact-form.tsx:
  <- [useForm, validateContact, Button]
  -> [ContactForm]

NewsletterFile @ components/newsletter-form.tsx:
  <- [useNewsletter]
  -> [Newsletter]

# UI components
ButtonFile @ components/ui/button.tsx:
  -> []

Button &! "Button component"

CardFile @ components/ui/card.tsx:
  -> []

Card &! "Card component"

# Utility files
ContentLoaderFile @ lib/content.ts:
  -> [getAllPosts, getPostBySlug, getProjects, getAllMDXFiles]

MDXComponentsFile @ lib/mdx-components.tsx:
  -> [mdxComponents]

UtilsFile @ lib/utils.ts:
  -> [formatDate, slugify, cn]

SEOFile @ lib/seo.ts:
  -> [generateSEOMetadata, generateJSONLD]

# Schema files
SchemaFile @ lib/schemas.ts:
  -> [contactSchema, postSchema, projectSchema, validateContact]

# Hook files
HooksFile @ lib/hooks.ts:
  -> [useScrollSpy, useTheme, useForm, useNewsletter]

# Config files
SiteConfigFile @ config/site.ts:
  -> []

# Content processing
MDXProcessorFile @ lib/mdx-processor.ts:
  <- [MDXProcessor]
  -> [processMDX, serializeMDX, MDXProcessor]

ImageOptimizerFile @ lib/image-optimizer.ts:
  <- [ImageOptimizer]
  -> [optimizeImage, getBlurDataURL, ImageOptimizer]

# Feed generators
RSSGeneratorFile @ lib/feeds/rss.ts:
  <- [getAllPosts, ContentLoaderFile, RSSGenerator]
  -> [generateRSSFeed, RSSGenerator]

SitemapGeneratorFile @ lib/feeds/sitemap.ts:
  <- [getAllPosts, getProjects, ContentLoaderFile, SitemapGenerator]
  -> [generateSitemap, SitemapGenerator]

Analytics &! "Analytics component"

# Environment variables
NEXT_PUBLIC_SITE_URL $env "Production site URL" (required)
RESEND_API_KEY $env "Resend API key for contact form" (required)

# Configuration parameters
ENABLE_DRAFTS $config "Show draft posts in development"
  = "false"
IMAGE_QUALITY $config "Sharp image quality"
  = "85"
OG_IMAGE_WIDTH $config "Open Graph image width"
  = "1200"
OG_IMAGE_HEIGHT $config "Open Graph image height"
  = "630"

# Runtime parameters
NODE_VERSION $runtime "Node.js version"
  = "20.x"
DEPLOYMENT_TARGET $runtime "Deployment platform"
  = "vercel"

# UI Components with proper hierarchy
HomePage &! "Portfolio homepage"
  > [HeroSection, FeaturedProjects, RecentPosts, SkillsSection]

BlogListPage &! "Blog listing page"
  > [BlogGrid, Pagination]

BlogPostPage &! "Individual blog post"
  > [ArticleHeader, ArticleContent, AuthorBio, RelatedPosts]

ProjectsPage &! "Projects showcase"
  > [ProjectGrid, FilterBar]

AboutPage &! "About me page"
  > [AboutHero, ExperienceTimeline, SkillsGrid]

ContactPage &! "Contact page"
  > [ContactInfo, ContactForm, LocationMap]

# Shared components
Header &! "Site header"
  > [Logo, Navigation, ThemeToggle]

Footer &! "Site footer"
  > [SocialLinks, Newsletter, Copyright]

Navigation & "Main navigation"
  > [NavLinkComponent, MobileMenu]

# Homepage sections
HeroSection & "Hero banner"
  > [AnimatedHeading, CTAButtons, HeroImage]

FeaturedProjects & "Featured projects showcase"
  > [ProjectCard]

RecentPosts & "Recent blog posts"
  > [BlogCard]

SkillsSection & "Skills overview"
  > [SkillCategory]

# Blog components
BlogGrid & "Blog posts grid"
  > [BlogCard]

BlogCard & "Blog post preview card"
  > [PostThumbnail, PostMeta]

ArticleHeader & "Article header section"
  > [Breadcrumbs, ReadingTime, ShareButtons]

ArticleContent & "Article body content"
  > [MDXContent, TableOfContents]

AuthorBio & "Author biography section"
  > [ProfileImage, Bio]

TableOfContents & "Table of contents navigation"

RelatedPosts & "Related posts section"
  > [BlogCard]

Pagination & "Pagination controls"

# Project components
ProjectGrid & "Projects grid layout"
  > [ProjectCard]

ProjectCard & "Project showcase card"
  > [ProjectImage, TechStack, ProjectLinks]

FilterBar & "Project filter controls"
  > [CategoryFilter, TechFilter]

# About components
AboutHero & "About hero section"
  > [ProfileImage, Bio]

ExperienceTimeline & "Work experience timeline"
  > [TimelineItem]

SkillsGrid & "Skills grid display"
  > [SkillCategory]

# Contact components
ContactInfo & "Contact information"
  > [EmailLink, SocialLinks]

ContactForm & "Contact form"
  > [FormField, SubmitButton]

LocationMap & "Location map embed"

# Shared UI elements
Logo & "Site logo"
NavLinkComponent & "Navigation link component"
MobileMenu & "Mobile navigation menu"
ThemeToggle & "Dark mode toggle"
SocialLinks & "Social media links"
Newsletter & "Newsletter signup form"
Copyright & "Copyright notice"

# Content elements
AnimatedHeading & "Animated hero heading"
CTAButtons & "Call to action buttons"
HeroImage & "Hero section image"
PostThumbnail & "Blog post thumbnail"
PostMeta & "Post metadata"
Breadcrumbs & "Breadcrumb navigation"
ReadingTime & "Estimated reading time"
ShareButtons & "Social share buttons"
MDXContent & "MDX rendered content"
ProjectImage & "Project preview image"
TechStack & "Technology stack badges"
ProjectLinks & "Project external links"
CategoryFilter & "Category filter dropdown"
TechFilter & "Technology filter"
ProfileImage & "Profile photo"
Bio & "Biography text"
TimelineItem & "Timeline entry"
SkillCategory & "Skill category group"
EmailLink & "Email contact link"
FormField & "Form input field"
SubmitButton & "Form submit button"

# Image assets
logo ~ "Site logo SVG"

favicon ~ "Site favicon"

ogDefaultImage ~ "Default Open Graph image"

# Icon assets
icons ~ "Icon sprite sheet"

# Font assets
fontInter ~ "Inter variable font"

fontMono ~ "JetBrains Mono font"

# Asset constants
logoSvg ! : string
faviconIco ! : string 
defaultOG ! : string
iconSprite ! : string
interFont ! : string
monoFont ! : string

# Asset files (importing Assets to use them)
AssetImportsFile @ lib/assets.ts:
  <- [logo, favicon, ogDefaultImage, icons, fontInter, fontMono]
  -> [logoSvg, faviconIco, defaultOG, iconSprite, interFont, monoFont]

# Functions
build :: () => void
  ~> [generateRSSFeed, generateSitemap]
  $< [NODE_VERSION, DEPLOYMENT_TARGET]

getAllPosts :: () => Promise<Post[]>
  ~> [getAllMDXFiles, processMDX]
  -> Post[]
  $< [ENABLE_DRAFTS]

getPostBySlug :: (slug: string) => Promise<Post>
  <- PostParams
  ~> [readFile, processMDX]
  -> Post

getProjects :: () => Promise<object[]>
  ~> [getAllMDXFiles, processMDX]
  -> object[]

getAllMDXFiles :: (directory: string) => string[]
  ~> [readdirSync]

processMDX :: (content: string) => ProcessedMDX
  <- MDXSource
  ~> [serializeMDX]
  -> ProcessedMDX

serializeMDX :: (source: string) => SerializedMDX
  ~> [MDXProcessor.serialize]
  -> SerializedMDX

optimizeImage :: (src: string) => Promise<OptimizedImage>
  ~> [ImageOptimizer.resize, ImageOptimizer.toFormat]
  -> OptimizedImage
  $< [IMAGE_QUALITY]

getBlurDataURL :: (src: string) => Promise<string>
  ~> [ImageOptimizer.getPlaiceholder]

generateRSSFeed :: () => Promise<void>
  ~> [getAllPosts, RSSGenerator.createFeed, RSSGenerator.addItem, RSSGenerator.writeRSS]
  $< [NEXT_PUBLIC_SITE_URL]

generateSitemap :: () => Promise<void>
  ~> [getAllPosts, getProjects, SitemapGenerator.createSitemap, SitemapGenerator.addURL, SitemapGenerator.write]
  $< [NEXT_PUBLIC_SITE_URL]

generateSEOMetadata :: (params: SEOParams) => Metadata
  <- SEOParams
  -> Metadata

generateJSONLD :: (type: string, data: any) => object
  -> JSONLDSchema

formatDate :: (date: Date) => string
slugify :: (text: string) => string
cn :: (...classes: string[]) => string

useScrollSpy :: (ids: string[]) => string
useTheme :: () => ThemeContext
  -> ThemeContext
useForm :: (schema: ZodSchema) => FormContext
  <- ZodSchema
  -> FormContext
useNewsletter :: () => NewsletterContext
  -> NewsletterContext

POST :: (request: Request) => Promise<Response>
  <- ContactRequest
  ~> [validateContact, EmailClient.send]
  -> ContactResponse
  $< [RESEND_API_KEY]

validateContact :: (data: any) => ContactRequest
  ~> [contactSchemaValidation]
  -> ContactRequest

GET :: (request: Request) => Promise<Response>
  ~> [OGImageGenerator.generate]
  -> ImageResponse
  $< [OG_IMAGE_WIDTH, OG_IMAGE_HEIGHT]


generateStaticParams :: () => Promise<object[]>
  ~> [getAllPosts]
  -> object[]

# Data Transfer Objects
Post % "Blog post data"
  - slug: string "URL slug"
  - title: string "Post title"
  - description: string "Meta description"
  - date: Date "Publish date"
  - author: string "Author name"
  - tags: string[] "Post tags"
  - content: string "Post content"
  - readingTime: number "Minutes to read"
  - image: string "Featured image" (optional)


PostParams % "Post query parameters"
  - slug: string "Post slug"

MDXSource % "MDX source content"
  - content: string "Raw MDX content"
  - data: object "Front matter data"

ProcessedMDX % "Processed MDX data"
  - content: SerializedMDX "Serialized MDX"
  - frontmatter: object "Front matter"
  - readingTime: number "Reading time"

SerializedMDX % "Serialized MDX content"
  - compiledSource: string "Compiled source"
  - scope: object "MDX scope"

OptimizedImage % "Optimized image data"
  - src: string "Image source"
  - width: number "Image width"
  - height: number "Image height"
  - blurDataURL: string "Blur placeholder"

SEOParams % "SEO metadata parameters"
  - title: string "Page title"
  - description: string "Page description"
  - image: string "OG image" (optional)
  - article: boolean "Is article" (optional)

Metadata % "Next.js metadata"
  - title: string "Page title"
  - description: string "Page description"
  - openGraph: object "OG metadata"
  - twitter: object "Twitter metadata"

ThemeContext % "Theme context data"
  - theme: string "Current theme"
  - toggleTheme: function "Theme toggle function"

FormContext % "Form context data"
  - register: function "Register field"
  - handleSubmit: function "Submit handler"
  - errors: object "Validation errors"
  - isSubmitting: boolean "Submission state"

NewsletterContext % "Newsletter context"
  - subscribe: function "Subscribe function"
  - isSubscribed: boolean "Subscription state"

ContactRequest % "Contact form request"
  - name: string "Sender name"
  - email: string "Sender email"
  - message: string "Message content"

ContactResponse % "Contact form response"
  - success: boolean "Success status"
  - message: string "Response message"


ImageResponse % "OG image response"
  - image: Buffer "Image buffer"
  - contentType: string "Image MIME type"

JSONLDSchema % "JSON-LD structured data"
  - @context: string "Schema context"
  - @type: string "Schema type"
  - properties: object "Schema properties"

ZodSchema % "Zod validation schema"
  - shape: object "Schema shape"
  - parse: function "Parse function"

# Constants
nextConfig ! : object
postcssConfig ! : object
tailwindConfig ! : object
mdxComponents ! : object
contactSchema ! : object
postSchema ! : object
projectSchema ! : object

# Type definitions for constants

NavLink % "Navigation link"
  - label: string "Link label"
  - href: string "Link URL"


# Classes for external dependency wrappers
MDXProcessor <:
  <- [@mdx-js/react, rehype-highlight, rehype-slug, remark-gfm]
  => [evaluate, serialize]

ImageOptimizer <:
  <- [sharp, @plaiceholder/next]
  => [resize, toFormat, getPlaiceholder]

RSSGenerator <:
  <- [feed]
  => [createFeed, addItem, writeRSS]

SitemapGenerator <:
  <- [sitemap]
  => [createSitemap, addURL, write]


EmailClient <:
  <- [resend]
  => [send]

OGImageGenerator <:
  <- [@vercel/og]
  => [generate]