# TypedMind Static Website Playground

TypedMindPlayground -> PlaygroundHTML "TypedMind interactive playground" v2.0.0

# Main HTML Entry
PlaygroundHTML @ src/playground.html:
  <- [TokenManagerJS, ChatServiceJS, CheckpointManagerJS, ChatUIJS, MonacoJS, ParserJS, RefactoredHTML]
  "Main playground HTML file"

# Core JavaScript Services
TokenManagerJS @ assets/js/token-manager.js:
  -> [TokenManager]
  "Secure token storage service"

ChatServiceJS @ assets/js/chat-service.js:
  <- [TokenManager]
  -> [ChatService]
  "AI chat integration service"

CheckpointManagerJS @ assets/js/code-checkpoint-manager.js:
  -> [CodeCheckpointManager]
  "Code versioning service"

ChatUIJS @ assets/js/chat-ui.js:
  <- [TokenManager, ChatService, CodeCheckpointManager]
  -> [ChatUI]
  "Chat user interface"

MonacoJS @ assets/js/typedmind-monaco-simple.js:
  -> [setupMonaco]
  "Monaco editor setup"

ParserJS @ assets/js/typedmind-parser-browser.js:
  -> [TypedMindParser]
  "TypedMind parser"

RefactoredHTML @ src/refactored-playground.html:
  <- [EventEmitterJS, BaseComponentJS, NotificationJS, ConfigPanelJS, ChatManagerJS, ServicesJS, DTOJS, InitializationJS]
  "Refactored playground HTML"

# Refactored Components
EventEmitterJS @ assets/js/refactored/event-emitter.js:
  -> [EventEmitter]
  "Event system base"

BaseComponentJS @ assets/js/refactored/base-ui-component.js:
  <- [EventEmitter]
  -> [BaseUIComponent]
  "UI component base"

NotificationJS @ assets/js/refactored/notification-system.js:
  <- [BaseUIComponent]
  -> [NotificationSystem]
  "Notification system"

ConfigPanelJS @ assets/js/refactored/configuration-panel.js:
  <- [BaseUIComponent]
  -> [ConfigurationPanel]
  "Configuration panel"

ChatManagerJS @ assets/js/refactored/chat-ui-manager.js:
  <- [BaseUIComponent]
  -> [ChatUIManager]
  "Chat UI manager"

ServicesJS @ assets/js/refactored/services.js:
  -> [ServiceContainer]
  "Service container"

DTOJS @ assets/js/refactored/dtos.js:
  -> [createChatMessage, createCheckpoint]
  "Data object factories"

InitializationJS @ assets/js/refactored/initialization.js:
  <- [ServiceContainer, ChatUIManager, ConfigurationPanel, NotificationSystem]
  -> [initializeRefactored]
  "Initialization logic"

# Service Classes
TokenManager <: Object
  => [encryptToken, decryptToken, hasToken, removeToken]

ChatService <: Object
  => [sendMessage, testToken, handleToolCalls, addFloatingContext]

CodeCheckpointManager <: Object
  => [createCheckpoint, restoreCheckpoint, validateCurrentCode, getAllCheckpoints]

ChatUI <: Object
  => [sendMessage, clearChatHistory, fixProblems, renderMessage]

TypedMindParser <: Object
  => [parse, validate]

EventEmitter <: Object
  => [on, off, emit]

BaseUIComponent <: EventEmitter
  => [render, destroy, bindEvents]

NotificationSystem <: BaseUIComponent
  => [showSuccess, showError, showInfo, showWarning]

ConfigurationPanel <: BaseUIComponent
  => [toggleConfig, saveConfiguration, clearConfiguration]

ChatUIManager <: BaseUIComponent
  => [sendMessage, clearHistory, fixProblems]

ServiceContainer <: Object
  => [getService, registerService, initialize]

# Functions
setupMonaco :: () => void
  "Initialize Monaco editor"

initializeRefactored :: () => void
  "Initialize refactored app"
  ~> [ServiceContainer.initialize]

createChatMessage :: (role: string, content: string) => ChatMessage
  "Create chat message"
  -> ChatMessage

createCheckpoint :: (id: string, content: string) => Checkpoint
  "Create checkpoint"
  -> Checkpoint

# DTOs
ChatMessage % "Chat message"
  - role: string "User or assistant"
  - content: string "Message text"
  - timestamp: number "Unix timestamp"

Checkpoint % "Code checkpoint"
  - id: string "Unique ID"
  - content: string "Code content"
  - description: string "Description"

# Dependencies
monaco-editor ^ "Monaco code editor" v0.44.0