{
  "$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
  "name": "TypedMind",
  "patterns": [
    { "include": "#comments" },
    { "include": "#strings" },
    { "include": "#dto-fields" },
    { "include": "#method-calls" },
    { "include": "#referenced-entities" },
    { "include": "#entities" },
    { "include": "#operators" },
    { "include": "#keywords" },
    { "include": "#wildcards" },
    { "include": "#imports" }
  ],
  "repository": {
    "comments": {
      "patterns": [
        {
          "name": "comment.line.number-sign.typedmind",
          "match": "#.*$"
        }
      ]
    },
    "dto-fields": {
      "patterns": [
        {
          "match": "^\\s*-\\s*([a-zA-Z_][a-zA-Z0-9_]*)\\??:\\s*([^\"]+?)(?:\\s+(\"[^\"]+\"))?(?:\\s+\\((optional|required)\\))?\\s*$",
          "captures": {
            "1": {
              "name": "variable.other.property.typedmind"
            },
            "2": {
              "name": "support.type.typedmind"
            },
            "3": {
              "name": "string.quoted.double.typedmind"
            },
            "4": {
              "name": "keyword.other.optional.typedmind"
            }
          }
        }
      ]
    },
    "method-calls": {
      "patterns": [
        {
          "comment": "Class method calls like UserService.create or Logger.info",
          "match": "\\b([A-Za-z][A-Za-z0-9_]*)\\.([a-zA-Z][a-zA-Z0-9_]*)\\b",
          "captures": {
            "1": {
              "name": "entity.name.class.typedmind"
            },
            "2": {
              "name": "entity.name.function.method.typedmind"
            }
          }
        }
      ]
    },
    "entities": {
      "patterns": [
        {
          "name": "entity.name.type.typedmind",
          "match": "\\b(Program|File|Function|Class|ClassFile|Constants|Asset|UIComponent|DTO|RunParameter|Dependency)\\b"
        },
        {
          "name": "entity.name.namespace.program.typedmind",
          "match": "\\b[A-Za-z][A-Za-z0-9_]*\\b(?=\\s*->\\s*\\w+)"
        },
        {
          "name": "entity.name.type.file.typedmind",
          "match": "\\b[A-Za-z][A-Za-z0-9_]*\\b(?=\\s*@)"
        },
        {
          "name": "entity.name.function.typedmind",
          "match": "\\b[A-Za-z][A-Za-z0-9_]*\\b(?=\\s*::)"
        },
        {
          "name": "entity.name.class.typedmind",
          "match": "\\b[A-Za-z][A-Za-z0-9_]*\\b(?=\\s*<:)"
        },
        {
          "name": "entity.name.class.classfile.typedmind",
          "match": "\\b[A-Za-z][A-Za-z0-9_]*\\b(?=\\s*#:)"
        },
        {
          "name": "entity.name.constant.typedmind",
          "match": "\\b[A-Za-z][A-Za-z0-9_]*\\b(?=\\s*!)"
        },
        {
          "name": "entity.name.dto.typedmind",
          "match": "\\b[A-Za-z][A-Za-z0-9_]*\\b(?=\\s*%)"
        },
        {
          "name": "entity.name.asset.typedmind",
          "match": "\\b[A-Za-z][A-Za-z0-9_]*\\b(?=\\s*~)"
        },
        {
          "name": "entity.name.component.typedmind",
          "match": "\\b[A-Za-z][A-Za-z0-9_]*\\b(?=\\s*&!?)"
        },
        {
          "name": "entity.name.parameter.typedmind",
          "match": "\\b[A-Z][A-Z0-9_]*\\b(?=\\s*\\$(env|iam|runtime|config))"
        },
        {
          "name": "entity.name.dependency.typedmind",
          "match": "[@\\w\\-/]+(?=\\s*\\^)"
        }
      ]
    },
    "referenced-entities": {
      "patterns": [
        {
          "comment": "Function calls",
          "match": "(~>)\\s*\\[([^\\]]+)\\]",
          "captures": {
            "1": { "name": "keyword.operator.calls.typedmind" },
            "2": {
              "patterns": [
                { "include": "#method-calls" },
                {
                  "match": "\\b[A-Za-z][A-Za-z0-9_]*\\b",
                  "name": "entity.name.function.reference.typedmind"
                },
                {
                  "match": ",",
                  "name": "punctuation.separator.comma.typedmind"
                }
              ]
            }
          }
        },
        {
          "comment": "Imports",
          "match": "(<-)\\s*\\[([^\\]]+)\\]",
          "captures": {
            "1": { "name": "keyword.operator.imports.typedmind" },
            "2": {
              "patterns": [
                {
                  "match": "\\b[A-Za-z][A-Za-z0-9_]*\\b",
                  "name": "entity.name.reference.typedmind"
                },
                {
                  "match": ",",
                  "name": "punctuation.separator.comma.typedmind"
                }
              ]
            }
          }
        },
        {
          "comment": "Exports",
          "match": "(->)\\s*\\[([^\\]]+)\\]",
          "captures": {
            "1": { "name": "keyword.operator.exports.typedmind" },
            "2": {
              "patterns": [
                {
                  "match": "\\b[A-Za-z][A-Za-z0-9_]*\\b",
                  "name": "entity.name.reference.typedmind"
                },
                {
                  "match": ",",
                  "name": "punctuation.separator.comma.typedmind"
                }
              ]
            }
          }
        },
        {
          "comment": "Methods",
          "match": "(=>)\\s*\\[([^\\]]+)\\]",
          "captures": {
            "1": { "name": "keyword.operator.methods.typedmind" },
            "2": {
              "patterns": [
                {
                  "match": "\\b[a-z][A-Za-z0-9_]*\\b",
                  "name": "entity.name.function.method.typedmind"
                },
                {
                  "match": ",",
                  "name": "punctuation.separator.comma.typedmind"
                }
              ]
            }
          }
        },
        {
          "comment": "UI affects",
          "match": "(~)\\s*\\[([^\\]]+)\\]",
          "captures": {
            "1": { "name": "keyword.operator.affects.typedmind" },
            "2": {
              "patterns": [
                {
                  "match": "\\b[A-Za-z][A-Za-z0-9_]*\\b",
                  "name": "entity.name.component.reference.typedmind"
                },
                {
                  "match": ",",
                  "name": "punctuation.separator.comma.typedmind"
                }
              ]
            }
          }
        },
        {
          "comment": "UI contains",
          "match": "(>)\\s*\\[([^\\]]+)\\]",
          "captures": {
            "1": { "name": "keyword.operator.contains.typedmind" },
            "2": {
              "patterns": [
                {
                  "match": "\\b[A-Za-z][A-Za-z0-9_]*\\b",
                  "name": "entity.name.component.reference.typedmind"
                },
                {
                  "match": ",",
                  "name": "punctuation.separator.comma.typedmind"
                }
              ]
            }
          }
        },
        {
          "comment": "UI contained by",
          "match": "(<)\\s*\\[([^\\]]+)\\]",
          "captures": {
            "1": { "name": "keyword.operator.containedby.typedmind" },
            "2": {
              "patterns": [
                {
                  "match": "\\b[A-Za-z][A-Za-z0-9_]*\\b",
                  "name": "entity.name.component.reference.typedmind"
                },
                {
                  "match": ",",
                  "name": "punctuation.separator.comma.typedmind"
                }
              ]
            }
          }
        },
        {
          "comment": "Parameter consumption",
          "match": "(\\$<)\\s*\\[([^\\]]+)\\]",
          "captures": {
            "1": { "name": "keyword.operator.consumes.typedmind" },
            "2": {
              "patterns": [
                {
                  "match": "\\b[A-Z][A-Z0-9_]*\\b",
                  "name": "entity.name.parameter.reference.typedmind"
                },
                {
                  "match": ",",
                  "name": "punctuation.separator.comma.typedmind"
                }
              ]
            }
          }
        },
        {
          "comment": "Asset contains program",
          "match": "(>>)\\s*(\\w+)",
          "captures": {
            "1": { "name": "keyword.operator.containsprogram.typedmind" },
            "2": { "name": "entity.name.namespace.program.typedmind" }
          }
        }
      ]
    },
    "operators": {
      "patterns": [
        {
          "name": "keyword.operator.arrow.typedmind",
          "match": "->"
        },
        {
          "name": "keyword.operator.import.typedmind",
          "match": "<-"
        },
        {
          "name": "keyword.operator.location.typedmind",
          "match": "@"
        },
        {
          "name": "keyword.operator.classfile.typedmind",
          "match": "#:"
        },
        {
          "name": "keyword.operator.signature.typedmind",
          "match": "::"
        },
        {
          "name": "keyword.operator.extends.typedmind",
          "match": "<:"
        },
        {
          "name": "keyword.operator.constants.typedmind",
          "match": "!"
        },
        {
          "name": "keyword.operator.dto.typedmind",
          "match": "%"
        },
        {
          "name": "keyword.operator.asset.typedmind",
          "match": "~"
        },
        {
          "name": "keyword.operator.component.typedmind",
          "match": "&!?"
        },
        {
          "name": "keyword.operator.runparam.typedmind",
          "match": "\\$(env|iam|runtime|config)"
        },
        {
          "name": "keyword.operator.dependency.typedmind",
          "match": "\\^"
        },
        {
          "name": "keyword.operator.calls.typedmind",
          "match": "~>"
        },
        {
          "name": "keyword.operator.methods.typedmind",
          "match": "=>"
        },
        {
          "name": "keyword.operator.containsprogram.typedmind",
          "match": ">>"
        },
        {
          "name": "keyword.operator.contains.typedmind",
          "match": ">"
        },
        {
          "name": "keyword.operator.containedby.typedmind",
          "match": "<"
        },
        {
          "name": "keyword.operator.consumes.typedmind",
          "match": "\\$<"
        },
        {
          "name": "keyword.operator.schema.typedmind",
          "match": ":"
        },
        {
          "name": "keyword.operator.default.typedmind",
          "match": "="
        }
      ]
    },
    "keywords": {
      "patterns": [
        {
          "name": "keyword.control.import.typedmind",
          "match": "\\b(@import|import)\\b"
        },
        {
          "name": "keyword.control.as.typedmind",
          "match": "\\b(as)\\b"
        },
        {
          "name": "keyword.other.optional.typedmind",
          "match": "\\b(optional|required)\\b"
        },
        {
          "name": "storage.type.typedmind",
          "match": "\\b(string|number|boolean|object|any|void|null|undefined|Date|Promise|Array|Record|Map|Set)\\b"
        },
        {
          "name": "keyword.other.version.typedmind",
          "match": "\\bv[0-9]+\\.[0-9]+\\.[0-9]+(-[a-zA-Z0-9\\.]+)?\\b"
        }
      ]
    },
    "imports": {
      "patterns": [
        {
          "match": "^\\s*(@import|import)\\s+\"([^\"]+)\"(?:\\s+(as)\\s+(\\w+))?",
          "captures": {
            "1": {
              "name": "keyword.control.import.typedmind"
            },
            "2": {
              "name": "string.quoted.double.typedmind"
            },
            "3": {
              "name": "keyword.control.as.typedmind"
            },
            "4": {
              "name": "entity.name.namespace.typedmind"
            }
          }
        }
      ]
    },
    "strings": {
      "patterns": [
        {
          "name": "string.quoted.double.typedmind",
          "begin": "\"",
          "end": "\"",
          "patterns": [
            {
              "name": "constant.character.escape.typedmind",
              "match": "\\\\."
            }
          ]
        }
      ]
    },
    "wildcards": {
      "patterns": [
        {
          "name": "keyword.operator.wildcard.typedmind",
          "match": "\\*"
        }
      ]
    }
  },
  "scopeName": "source.typedmind"
}