TypedMindRendererApp -> RendererFile v1.0.0 # Interactive visualization renderer for TypedMind DSL

RendererFile @ src/index.ts: # Main renderer implementation
  <- [StaticAssets]
  -> [RendererOptions, TypedMindRenderer, init, renderSidebar, renderGraph, selectNode, showDetails, setupSearch, renderErrors, zoomFit, toggleLayout, clearSelection, BuildConfig, PackageConfig]

# Interfaces and types
RendererOptions ~ "Configuration options for the renderer"
  :: port?: number
  :: host?: string
  :: openBrowser?: boolean

# Main renderer class
TypedMindRenderer <:
  => [setProgramGraph, setValidationResult, serve, generateStaticHTML, generateRendererJS, getGraphData, openInBrowser]
  -- [programGraph: ProgramGraph | null, validationResult: ValidationResult | null, options: RendererOptions]

# Public methods
setProgramGraph :: (graph: ProgramGraph) => void # Set the program graph to render

setValidationResult :: (result: ValidationResult) => void # Set validation results

serve :: () => Promise<void> # Start interactive server with API endpoints
  ~> [openInBrowser]

generateStaticHTML :: () => string # Generate static HTML output with inline JavaScript
  ~> [generateRendererJS]

# Private methods
generateRendererJS :: () => string # Generate complete JavaScript renderer code
  ~> [getGraphData]

getGraphData :: () => object # Transform graph data for rendering

openInBrowser :: (url: string) => void # Open URL in default browser

# Static resources
StaticAssets @ src/static/:
  -> [TypedMindExplorerUI, SidebarSection, CanvasSection, SearchInput, EntityListContainer, GraphSVG, DetailsPanel, ErrorPanel, ControlsPanel, FitViewButton, ToggleLayoutButton, ClearSelectionButton]

TypedMindExplorerUI &! "Main HTML UI structure"
  > [SidebarSection, CanvasSection]

SidebarSection & "Left sidebar with search and entity list"
  > [SearchInput, EntityListContainer]

CanvasSection & "Main canvas area"
  > [GraphSVG, DetailsPanel, ErrorPanel, ControlsPanel]

SearchInput & "Entity search input field"

EntityListContainer & "Container for grouped entities"

GraphSVG & "D3.js SVG graph visualization"

DetailsPanel & "Selected entity details display"

ErrorPanel & "Validation errors display"

ControlsPanel & "Graph controls (zoom, layout, clear)"
  > [FitViewButton, ToggleLayoutButton, ClearSelectionButton]

FitViewButton & "Fit graph to view"

ToggleLayoutButton & "Toggle graph layout"

ClearSelectionButton & "Clear entity selection"

# Note: The following functions are generated and embedded in the HTML response
# They are not directly exported but exist within the generated JavaScript

# Client-side method that initializes the renderer
init :: () => void # Initialize the renderer
  ~> [renderSidebar, renderGraph, setupSearch, renderErrors]

renderSidebar :: () => void # Render entity sidebar
  ~ [EntityListContainer]

renderGraph :: () => void # Render D3 force-directed graph
  ~ [GraphSVG]

selectNode :: (name: string) => void # Select an entity node
  ~> [showDetails]
  ~ [EntityListContainer, GraphSVG, DetailsPanel]

showDetails :: (entity: object) => void # Display entity details
  ~ [DetailsPanel]

setupSearch :: () => void # Setup search functionality
  ~ [SearchInput, EntityListContainer]

renderErrors :: () => void # Display validation errors
  ~ [ErrorPanel]

zoomFit :: () => void # Fit graph to viewport
  ~ [GraphSVG]

toggleLayout :: () => void # Toggle between layout types (placeholder)

clearSelection :: () => void # Clear current selection
  ~ [EntityListContainer, GraphSVG, DetailsPanel]

# API endpoints served by TypedMindRenderer
RootEndpoint @ "/" ~ "Serve static HTML"

RendererJSEndpoint @ "/renderer.js" ~ "Serve generated JavaScript"

GraphAPIEndpoint @ "/api/graph" ~ "Serve graph data JSON"

# Additional Assets
BuildConfig ~ "TSUP build configuration"
PackageConfig ~ "Package.json configuration"